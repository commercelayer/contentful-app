{"mappings":"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","sources":["packages/core/src/index.ts","packages/core/src/GlobalStyles/index.ts","packages/core/src/GlobalStyles/GlobalStyles.tsx","packages/core/src/Flex/index.ts","packages/core/src/Flex/Flex.tsx","packages/core/src/Box/index.ts","packages/core/src/Box/Box.tsx","packages/core/src/utils/getSpacingStyles.ts","packages/core/src/Grid/index.ts","packages/core/src/Grid/CompoundGrid.tsx","packages/core/src/Grid/Grid.tsx","packages/core/src/Grid/GridItem/GridItem.tsx","packages/core/src/Stack/index.ts","packages/core/src/Stack/Stack.tsx","packages/core/src/ScreenReaderOnly/index.ts","packages/core/src/ScreenReaderOnly/ScreenReaderOnly.tsx","packages/core/src/ScreenReaderOnly/ScreenReaderOnly.styles.ts","packages/core/src/hooks/index.ts","packages/core/src/hooks/useId.ts","packages/core/src/hooks/useControllableState.ts","packages/core/src/utils/mergeRefs.ts","packages/core/src/utils/getEntityStatusStyles.ts"],"sourcesContent":["export { GlobalStyles } from './GlobalStyles';\nexport type {\n  PolymorphicComponent,\n  PropsWithHTMLElement,\n  PolymorphicProps,\n  ExpandProps,\n} from './Primitive';\nexport type {\n  CommonProps,\n  EntityStatus,\n  MarginProps,\n  PaddingProps,\n  PickUnion,\n  Spacing,\n} from './types';\nexport { Flex } from './Flex';\nexport type { FlexProps } from './Flex';\nexport { Grid, GridItem } from './Grid';\nexport type { GridProps } from './Grid/Grid';\nexport type { GridItemProps } from './Grid/GridItem/GridItem';\nexport { Box, useBox } from './Box';\nexport type { BoxProps } from './Box';\nexport { Stack } from './Stack';\nexport type { StackProps } from './Stack';\nexport { ScreenReaderOnly } from './ScreenReaderOnly';\nexport type { ScreenReaderOnlyProps } from './ScreenReaderOnly';\n\nexport { useControllableState, useId } from './hooks';\nexport type { UseControllableStateProps } from './hooks';\nexport { mergeRefs } from './utils/mergeRefs';\nexport { getEntityStatusStyles } from './utils/getEntityStatusStyles';\n","export { GlobalStyles } from './GlobalStyles';\n","import * as React from 'react';\nimport { Global, css, SerializedStyles } from '@emotion/core';\nimport tokens from '@contentful/f36-tokens';\n\nconst cssReset = css`\n  /* Remove default margin */\n  body,\n  h1,\n  h2,\n  h3,\n  h4,\n  p,\n  figure,\n  blockquote,\n  dl,\n  dd {\n    margin: 0;\n  }\n\n  /* Remove list styles on ul, ol elements with a list role, which suggests default styling will be removed */\n  ul[role='list'],\n  ol[role='list'] {\n    list-style: none;\n  }\n\n  /* Set core root defaults */\n  html:focus-within {\n    scroll-behavior: smooth;\n  }\n\n  /* Set core body defaults */\n  body {\n    text-rendering: optimizeSpeed;\n    line-height: 1.5;\n  }\n\n  /* A elements that don't have a class get default styles */\n  a:not([class]) {\n    text-decoration-skip-ink: auto;\n  }\n\n  /* Make images easier to work with */\n  img,\n  picture {\n    max-width: 100%;\n    display: block;\n  }\n\n  /* Inherit fonts for inputs and buttons */\n  input,\n  button,\n  textarea,\n  select {\n    font: inherit;\n  }\n\n  /* Remove all animations and transitions for people that prefer not to see them */\n  @media (prefers-reduced-motion: reduce) {\n    html:focus-within {\n      scroll-behavior: auto;\n    }\n    *,\n    *::before,\n    *::after {\n      animation-duration: 0.01ms !important;\n      animation-iteration-count: 1 !important;\n      transition-duration: 0.01ms !important;\n      scroll-behavior: auto !important;\n    }\n  }\n`;\n\nexport const GlobalStyles = ({\n  withNormalize = true,\n  styles,\n}: {\n  /**\n   * Determines if CSS reset should be used\n   *\n   * @default true\n   */\n  withNormalize?: boolean;\n  /**\n   * Extend global styles\n   *\n   * @default undefined\n   */\n  styles?: SerializedStyles;\n}) => {\n  return (\n    <Global\n      styles={css`\n        ${withNormalize ? cssReset : undefined};\n        html {\n          border: 0;\n          box-sizing: border-box;\n          margin: 0;\n          padding: 0;\n        }\n\n        body {\n          color: ${tokens.gray800};\n          font-family: ${tokens.fontStackPrimary};\n          font-size: ${tokens.fontSizeM};\n          line-height: ${tokens.lineHeightM};\n        }\n\n        code {\n          font-family: ${tokens.fontStackMonospace};\n        }\n\n        fieldset {\n          border: 0;\n          margin: 0;\n          padding: 0;\n        }\n\n        *,\n        *::after,\n        *::before {\n          -moz-osx-font-smoothing: grayscale;\n          -webkit-font-smoothing: antialiased;\n          box-sizing: inherit;\n        }\n\n        ${styles};\n      `}\n    />\n  );\n};\n","export { Flex } from './Flex';\nexport type { FlexProps } from './Flex';\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '../Primitive/Primitive';\nimport { useBox } from '../Box';\nimport type { MarginProps, PaddingProps, CommonProps, Spacing } from '../types';\nimport type * as CSS from 'csstype';\nimport tokens from '@contentful/f36-tokens';\n\nexport interface FlexInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * Sets width: 100% */\n  fullWidth?: boolean;\n  /**\n   * Sets height: 100% */\n  fullHeight?: boolean;\n\n  /**\n   * Sets display: inline-flex */\n  isInline?: boolean;\n\n  /**\n   * A shorthand property for flex-grow, flex-shrink, flex-basis\n   */\n  flex?: CSS.Property.Flex;\n  /**\n   * Defines the initial size of a flexbox item.\n   * */\n  flexBasis?: CSS.Property.FlexBasis;\n  /**\n   * Defines how much a flexbox item should shrink if there's not enough space available. */\n  flexShrink?: CSS.Property.FlexShrink;\n  /**\n   * Defines if flexbox items appear on a single line or on multiple lines within a flexbox container. */\n  flexWrap?: CSS.Property.FlexWrap;\n  /**\n   * Defines how flexbox items are ordered within a flexbox container. */\n  flexDirection?: CSS.Property.FlexDirection;\n  /**\n   * Defines how much a flexbox item should grow if there's space available. */\n  flexGrow?: CSS.Property.FlexGrow;\n  /**\n   * Defines a gap between flexbox items. */\n  gap?: Spacing | string;\n  /**\n   * Defines how flexbox/grid items are aligned according to the main axis, within a flexbox/grid container. */\n  justifyContent?: CSS.Property.JustifyContent;\n  /**\n   * Defines the default justify-self for all items of the box, giving them all a default way of justifying each box along the appropriate axis. */\n  justifyItems?: CSS.Property.JustifyContent;\n  /**\n   * Sets the way a box is justified inside its alignment container along the appropriate axis. */\n  justifySelf?: CSS.Property.JustifySelf;\n  /**\n   * Defines how flexbox items are aligned according to the cross axis, within a line of a flexbox container.\n   */\n  alignItems?: CSS.Property.AlignItems;\n  /**\n   * Works like align-items, but applies only to a single flexbox item, instead of all of them.\n   */\n  alignSelf?: CSS.Property.AlignItems;\n  /**\n   * Defines how each line is aligned within a flexbox/grid container.\n   */\n  alignContent?: CSS.Property.AlignContent;\n  /**\n   * Defines the order of a flexbox item\n   */\n  order?: CSS.Property.Order;\n}\n\nexport type FlexProps<\n  E extends React.ElementType = typeof FLEX_DEFAULT_TAG\n> = PolymorphicProps<FlexInternalProps, E>;\n\nconst FLEX_DEFAULT_TAG = 'div';\n\nfunction _Flex<E extends React.ElementType = typeof FLEX_DEFAULT_TAG>(\n  {\n    isInline,\n    alignItems,\n    alignSelf,\n    alignContent,\n    flex,\n    flexBasis,\n    flexShrink,\n    flexDirection,\n    flexGrow,\n    flexWrap,\n    fullHeight,\n    fullWidth,\n    gap,\n    justifyContent,\n    justifyItems,\n    justifySelf,\n    order,\n    children,\n    as,\n    ...otherProps\n  }: FlexProps<E>,\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || FLEX_DEFAULT_TAG,\n  });\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          display: isInline ? 'inline-flex' : 'flex',\n          width: fullWidth ? '100%' : undefined,\n          height: fullHeight ? '100%' : undefined,\n          flex,\n          flexBasis,\n          flexShrink,\n          flexDirection,\n          gap: tokens[gap] ?? gap,\n          justifyContent,\n          justifyItems,\n          justifySelf,\n          alignItems,\n          alignSelf,\n          alignContent,\n          order,\n          flexWrap,\n          flexGrow,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_Flex.displayName = 'Flex';\n\nexport const Flex: PolymorphicComponent<\n  ExpandProps<FlexInternalProps>,\n  typeof FLEX_DEFAULT_TAG\n> = React.forwardRef(_Flex);\n","export { Box, useBox } from './Box';\nexport type { BoxProps, BoxInternalProps } from './Box';\n","import * as React from 'react';\nimport * as CSS from 'csstype';\nimport { css, cx } from 'emotion';\nimport type { MarginProps, PaddingProps, CommonProps } from '../types';\nimport { getSpacingStyles } from '../utils/getSpacingStyles';\n\nconst BOX_DEFAULT_TAG: React.ElementType = 'div';\n\nimport {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '../Primitive/Primitive';\n\nexport interface BoxInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Sets the display behavior of the element\n   */\n  display?: CSS.Property.Display;\n  children?: React.ReactNode;\n  as?: React.ElementType<any>;\n}\n\nexport type BoxProps<\n  E extends React.ElementType = typeof BOX_DEFAULT_TAG\n> = PolymorphicProps<BoxInternalProps, E>;\n\nexport function useBox<E extends React.ElementType = typeof BOX_DEFAULT_TAG>(\n  props: BoxProps<E>,\n) {\n  const {\n    display,\n    className,\n    margin,\n    marginBottom,\n    marginLeft,\n    marginRight,\n    marginTop,\n    padding,\n    paddingBottom,\n    paddingLeft,\n    paddingRight,\n    paddingTop,\n    testId,\n    as: Element = BOX_DEFAULT_TAG,\n    ...otherProps\n  } = props;\n  const boxProps = {\n    className: cx(\n      css({\n        display,\n      }),\n      css({\n        ...getSpacingStyles({\n          margin,\n          marginBottom,\n          marginLeft,\n          marginRight,\n          marginTop,\n          padding,\n          paddingBottom,\n          paddingLeft,\n          paddingRight,\n          paddingTop,\n        }),\n      }),\n      className,\n    ),\n    ['data-test-id']: testId,\n    ...otherProps,\n  };\n\n  return {\n    boxProps: boxProps,\n    Element,\n  };\n}\n\nfunction _Box<E extends React.ElementType = typeof BOX_DEFAULT_TAG>(\n  props: BoxProps<E>,\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<E>(props);\n\n  return (\n    <Element {...boxProps} ref={ref}>\n      {props.children}\n    </Element>\n  );\n}\n\n_Box.displayName = 'Box';\n\nexport const Box: PolymorphicComponent<\n  ExpandProps<BoxInternalProps>,\n  typeof BOX_DEFAULT_TAG\n> = React.forwardRef(_Box);\n","import tokens from '@contentful/f36-tokens';\nimport type { MarginProps, PaddingProps, Spacing } from '../types';\n\nconst SpacingTable: { [key in Spacing]: string | number | undefined } = {\n  none: 0,\n  spacing2Xs: tokens.spacing2Xs,\n  spacingXs: tokens.spacingXs,\n  spacingS: tokens.spacingS,\n  spacingM: tokens.spacingM,\n  spacingL: tokens.spacingL,\n  spacingXl: tokens.spacingXl,\n  spacing2Xl: tokens.spacing2Xl,\n  spacing3Xl: tokens.spacing3Xl,\n  spacing4Xl: tokens.spacing4Xl,\n};\n\nexport function convertSpacingToToken(spacing: Spacing) {\n  return SpacingTable[spacing];\n}\n\nexport function getSpacingStyles(props: MarginProps & PaddingProps) {\n  return Object.assign(\n    {},\n    props.margin ? { margin: convertSpacingToToken(props.margin) } : null,\n    props.marginLeft\n      ? { marginLeft: convertSpacingToToken(props.marginLeft) }\n      : null,\n    props.marginRight\n      ? { marginRight: convertSpacingToToken(props.marginRight) }\n      : null,\n    props.marginTop\n      ? { marginTop: convertSpacingToToken(props.marginTop) }\n      : null,\n    props.marginBottom\n      ? { marginBottom: convertSpacingToToken(props.marginBottom) }\n      : null,\n    props.padding ? { padding: convertSpacingToToken(props.padding) } : null,\n    props.paddingLeft\n      ? { paddingLeft: convertSpacingToToken(props.paddingLeft) }\n      : null,\n    props.paddingRight\n      ? { paddingRight: convertSpacingToToken(props.paddingRight) }\n      : null,\n    props.paddingTop\n      ? { paddingTop: convertSpacingToToken(props.paddingTop) }\n      : null,\n    props.paddingBottom\n      ? { paddingBottom: convertSpacingToToken(props.paddingBottom) }\n      : null,\n  );\n}\n","export { Grid } from './CompoundGrid';\nexport type { GridProps } from './Grid';\nexport { GridItem } from './GridItem/GridItem';\nexport type { GridItemProps } from './GridItem/GridItem';\n","import { Grid as OriginalGrid } from './Grid';\nimport { GridItem } from './GridItem/GridItem';\n\ntype CompoundGrid = typeof OriginalGrid & {\n  Item: typeof GridItem;\n};\n\nexport const Grid = OriginalGrid as CompoundGrid;\nGrid.Item = GridItem;\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '../Primitive/Primitive';\nimport { useBox } from '../Box';\nimport type * as CSS from 'csstype';\nimport type { MarginProps, PaddingProps, CommonProps, Spacing } from '../types';\nimport { convertSpacingToToken } from '../utils/getSpacingStyles';\n\nexport interface GridInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * Defines how many columns, default is `auto` */\n  columns?: number | CSS.Property.GridTemplateColumns;\n  /**\n   * Defines how many rows, default is `auto` */\n  rows?: number | CSS.Property.GridTemplateColumns;\n  /**\n   * Spaces between rows, corresponds to of spacing tokens values, default is none */\n  rowGap?: Spacing;\n  /**\n   * One of Spacing tokens values, default is 0 */\n  columnGap?: Spacing;\n  /**\n   * One of grid-auto-flow css values */\n  flow?: CSS.Property.GridAutoFlow;\n  /**\n   * Sets display:inline-grid */\n  isInline?: boolean;\n  /**\n   * One of justify-content css values */\n  justifyContent?: CSS.Property.JustifyContent;\n  /**\n   * One of justify-content css values */\n  alignContent?: CSS.Property.AlignContent;\n}\n\nconst GRID_DEFAULT_TAG = 'div';\n\nexport type GridProps<\n  E extends React.ElementType = typeof GRID_DEFAULT_TAG\n> = PolymorphicProps<GridInternalProps, E>;\n\nfunction _Grid<E extends React.ElementType = typeof GRID_DEFAULT_TAG>(\n  {\n    alignContent,\n    children,\n    columnGap = 'spacingM',\n    columns = 'auto',\n    flow,\n    isInline,\n    justifyContent,\n    rowGap = 'none',\n    rows = 'auto',\n    as,\n    ...otherProps\n  }: GridProps<E>,\n  ref: React.Ref<any>,\n) {\n  const handleGridTemplate = (value?: string | number) => {\n    if (typeof value === 'number') {\n      return `repeat(${value}, minmax(0, 1fr))`;\n    }\n    return value;\n  };\n\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || GRID_DEFAULT_TAG,\n  });\n\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          display: isInline ? 'inline-grid' : 'grid',\n          gridTemplateColumns: handleGridTemplate(columns),\n          gridTemplateRows: handleGridTemplate(rows),\n          flow,\n          justifyContent,\n          alignContent,\n          columnGap: convertSpacingToToken(columnGap) ?? 0,\n          rowGap: convertSpacingToToken(rowGap) ?? 0,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_Grid.displayName = 'Grid';\n\nexport const Grid: PolymorphicComponent<\n  ExpandProps<GridInternalProps>,\n  typeof GRID_DEFAULT_TAG\n> = React.forwardRef(_Grid);\n","import * as React from 'react';\nimport { css, cx } from 'emotion';\nimport {\n  PolymorphicProps,\n  PolymorphicComponent,\n} from '../../Primitive/Primitive';\nimport { useBox } from '../../Box';\nimport type { MarginProps, PaddingProps, CommonProps } from '../../types';\nimport type * as CSS from 'csstype';\n\nconst GRID_ITEM_DEFAULT_TAG = 'div';\n\nexport interface GridItemInternalProps\n  extends CommonProps,\n    MarginProps,\n    PaddingProps {\n  /**\n   * Child nodes to be rendered in the component */\n  children?: React.ReactNode;\n  /**\n   * one of grid-column-start css values */\n  columnStart?: CSS.Property.GridColumnStart;\n  /**\n   * one of grid-column-end css values */\n  columnEnd?: CSS.Property.GridColumnEnd;\n  /**\n   * one of grid-column-start css values */\n  rowStart?: CSS.Property.GridRowStart;\n  /**\n   * one of grid-row-end css values */\n  rowEnd?: CSS.Property.GridRowEnd;\n  /**\n   * one of grid-area css values */\n  area?: CSS.Property.GridArea;\n  /**\n   * order css property */\n  order?: number;\n}\n\nexport type GridItemProps<\n  E extends React.ElementType = typeof GRID_ITEM_DEFAULT_TAG\n> = PolymorphicProps<GridItemInternalProps, E>;\n\nfunction _GridItem<E extends React.ElementType = typeof GRID_ITEM_DEFAULT_TAG>(\n  {\n    children,\n    columnStart,\n    columnEnd,\n    rowStart,\n    rowEnd,\n    area,\n    order,\n    ...otherProps\n  }: GridItemProps<E>,\n  ref: React.Ref<any>,\n) {\n  const calculatedArea = area\n    ? area\n    : [\n        rowStart || 'auto',\n        columnStart || 'auto',\n        rowEnd || 'auto',\n        columnEnd || 'auto',\n      ].join(' / ');\n\n  const { boxProps, Element } = useBox(otherProps);\n\n  return (\n    <Element\n      {...boxProps}\n      className={cx(\n        css({\n          gridArea: calculatedArea,\n          order,\n        }),\n        boxProps.className,\n      )}\n      ref={ref}\n    >\n      {children}\n    </Element>\n  );\n}\n\n_GridItem.displayName = 'GridItem';\n\nexport const GridItem: PolymorphicComponent<\n  GridItemInternalProps,\n  typeof GRID_ITEM_DEFAULT_TAG\n> = React.forwardRef(_GridItem);\n","export { Stack } from './Stack';\nexport type { StackProps } from './Stack';\n","import * as React from 'react';\nimport {\n  PolymorphicProps,\n  PolymorphicComponent,\n  ExpandProps,\n} from '../Primitive/Primitive';\nimport { useBox } from '../Box';\nimport type { Spacing } from '../types';\nimport { Flex, FlexInternalProps } from '../Flex/Flex';\n\nexport interface StackInternalProps\n  extends Omit<FlexInternalProps, 'flexDirection' | 'gap'> {\n  /**\n   * Defines how flexbox items are ordered within a flexbox container. */\n  flexDirection?: 'row' | 'column';\n  /**\n   * The space between each stack item\n   */\n  spacing?: Spacing;\n}\n\nexport type StackProps<\n  E extends React.ElementType = typeof STACK_DEFAULT_TAG\n> = PolymorphicProps<StackInternalProps, E>;\n\nconst STACK_DEFAULT_TAG = 'div';\n\nfunction _Stack<E extends React.ElementType = typeof STACK_DEFAULT_TAG>(\n  {\n    flexDirection = 'row',\n    alignItems = 'center',\n    isInline = false,\n    spacing = 'spacingM',\n    children,\n    as,\n    ...otherProps\n  }: StackProps<E>,\n  ref: React.Ref<any>,\n) {\n  const { boxProps, Element } = useBox<React.ElementType>({\n    ...otherProps,\n    as: as || STACK_DEFAULT_TAG,\n  });\n  return (\n    <Flex\n      {...boxProps}\n      as={Element}\n      flexDirection={flexDirection}\n      alignItems={alignItems}\n      isInline={isInline}\n      className={boxProps.className}\n      gap={spacing}\n      ref={ref}\n    >\n      {children}\n    </Flex>\n  );\n}\n\n_Stack.displayName = 'Stack';\n\nexport const Stack: PolymorphicComponent<\n  ExpandProps<StackInternalProps>,\n  typeof STACK_DEFAULT_TAG\n> = React.forwardRef(_Stack);\n","export { ScreenReaderOnly } from './ScreenReaderOnly';\nexport type { ScreenReaderOnlyProps } from './ScreenReaderOnly';\n","import { cx } from 'emotion';\nimport React from 'react';\nimport { getStyles } from './ScreenReaderOnly.styles';\nimport type { CommonProps } from '../types';\n\nexport interface ScreenReaderOnlyProps extends CommonProps {\n  children?: React.ReactNode;\n  as?: 'div' | 'span';\n}\n\nexport const ScreenReaderOnly = ({\n  children,\n  className,\n  testId = 'cf-ui-ScreenReaderOnly',\n  as = 'div',\n  ...otherProps\n}: ScreenReaderOnlyProps) => {\n  const styles = getStyles();\n\n  const Element: React.ElementType = as;\n\n  return (\n    <Element\n      {...otherProps}\n      data-test-id={testId}\n      className={cx(styles.screenReaderOnly, className)}\n    >\n      {children}\n    </Element>\n  );\n};\n","import { css } from 'emotion';\n\nexport function getStyles() {\n  return {\n    screenReaderOnly: css({\n      position: 'absolute',\n      width: '1px',\n      height: '1px',\n      padding: 0,\n      margin: '-1px',\n      overflow: 'hidden',\n      clip: 'rect(0, 0, 0, 0)',\n      border: 0,\n    }),\n  };\n}\n","export { useId } from './useId';\nexport { useControllableState } from './useControllableState';\nexport type { UseControllableStateProps } from './useControllableState';\n","import { useMemo } from 'react';\n\n/**\n * useId hook provides unique ids for react elements.\n *\n * @param id - an id, provided to a component's props. Can be undefined.\n * @param modifier - a descriptive string, to make ids more readable.\n * @returns a unique id\n */\nexport function useId(id?: string, modifier?: string): string {\n  return useMemo(\n    () => id || [modifier || 'id', Math.round(Math.random() * 10000)].join('_'),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [],\n  );\n}\n","import { useState, useCallback } from 'react';\n\nexport type UseControllableStateProps = {\n  isOpen: boolean;\n  defaultIsOpen?: boolean;\n  onOpen?: () => void;\n  onClose?: () => void;\n};\n\n/**\n * Hook that manages the controlled and un-controlled state\n */\nexport function useControllableState({\n  isOpen,\n  defaultIsOpen,\n  onOpen,\n  onClose,\n}: UseControllableStateProps) {\n  const [isOpenState, setIsOpen] = useState(defaultIsOpen || false);\n\n  const isControlled = isOpen !== undefined;\n  const isOpenValue = isControlled ? isOpen : isOpenState;\n\n  const handleClose = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(false);\n    }\n    onClose?.();\n  }, [isControlled, onClose]);\n\n  const handleOpen = useCallback(() => {\n    if (!isControlled) {\n      setIsOpen(true);\n    }\n    onOpen?.();\n  }, [isControlled, onOpen]);\n\n  return { isOpen: isOpenValue, isControlled, handleClose, handleOpen };\n}\n","import React from 'react';\n\ntype ReactRef<T> = React.Ref<T> | React.MutableRefObject<T>;\n\nexport function mergeRefs<T>(\n  ...refs: Array<ReactRef<T> | undefined>\n): React.RefCallback<T> {\n  return (value) => {\n    refs.forEach((ref) => {\n      if (typeof ref === 'function') {\n        ref(value);\n      } else if (ref != null) {\n        (ref as React.MutableRefObject<T | null>).current = value;\n      }\n    });\n  };\n}\n","import tokens from '@contentful/f36-tokens';\n\nimport type { EntityStatus } from '../types';\n\nexport const getEntityStatusStyles = ({ status }: { status: EntityStatus }) => {\n  switch (status) {\n    case 'published':\n      return {\n        color: tokens.colorGreenBase,\n        backgroundColor: tokens.colorGreenLightest,\n      };\n    case 'changed':\n      return {\n        color: tokens.colorBlueBase,\n        backgroundColor: tokens.colorBlueLightest,\n      };\n    case 'deleted':\n    case 'archived':\n      return {\n        color: tokens.colorRedBase,\n        backgroundColor: tokens.colorRedLightest,\n      };\n    case 'draft':\n      return {\n        color: tokens.colorOrangeDark,\n        backgroundColor:\n          '#ffefd5' /* temporary hardcoded value until palette improvements */,\n      };\n    case 'new':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.colorPrimary,\n      };\n    default:\n      console.warn(`Unknown EntityStatus: ${status}`);\n      return {};\n  }\n};\n"],"names":["GlobalStyles","PolymorphicComponent","PropsWithHTMLElement","PolymorphicProps","ExpandProps","CommonProps","EntityStatus","MarginProps","PaddingProps","PickUnion","Spacing","Flex","FlexProps","Grid","GridItem","GridProps","GridItemProps","Box","useBox","BoxProps","Stack","StackProps","ScreenReaderOnly","ScreenReaderOnlyProps","useControllableState","useId","UseControllableStateProps","mergeRefs","getEntityStatusStyles","React","Global","css","SerializedStyles","tokens","cssReset","withNormalize","styles","undefined","gray800","fontStackPrimary","fontSizeM","lineHeightM","fontStackMonospace","CSS","FlexInternalProps","children","ReactNode","fullWidth","fullHeight","isInline","flex","Property","flexBasis","FlexBasis","flexShrink","FlexShrink","flexWrap","FlexWrap","flexDirection","FlexDirection","flexGrow","FlexGrow","gap","justifyContent","JustifyContent","justifyItems","justifySelf","JustifySelf","alignItems","AlignItems","alignSelf","alignContent","AlignContent","order","Order","ElementType","FLEX_DEFAULT_TAG","E","_Flex","as","otherProps","ref","Ref","boxProps","Element","display","width","height","className","displayName","forwardRef","BoxInternalProps","getSpacingStyles","BOX_DEFAULT_TAG","Display","props","margin","marginBottom","marginLeft","marginRight","marginTop","padding","paddingBottom","paddingLeft","paddingRight","paddingTop","testId","_Box","SpacingTable","none","spacing2Xs","spacingXs","spacingS","spacingM","spacingL","spacingXl","spacing2Xl","spacing3Xl","spacing4Xl","convertSpacingToToken","spacing","Object","assign","OriginalGrid","CompoundGrid","Item","GridInternalProps","columns","GridTemplateColumns","rows","rowGap","columnGap","flow","GridAutoFlow","GRID_DEFAULT_TAG","_Grid","handleGridTemplate","value","gridTemplateColumns","gridTemplateRows","GRID_ITEM_DEFAULT_TAG","GridItemInternalProps","columnStart","GridColumnStart","columnEnd","GridColumnEnd","rowStart","GridRowStart","rowEnd","GridRowEnd","area","GridArea","_GridItem","calculatedArea","join","gridArea","StackInternalProps","Omit","STACK_DEFAULT_TAG","_Stack","getStyles","screenReaderOnly","useMemo","id","modifier","Math","round","random","useState","useCallback","isOpen","defaultIsOpen","onOpen","onClose","isOpenState","setIsOpen","isControlled","isOpenValue","handleClose","handleOpen","ReactRef","T","MutableRefObject","refs","Array","RefCallback","forEach","current","status","color","colorGreenBase","backgroundColor","colorGreenLightest","colorBlueBase","colorBlueLightest","colorRedBase","colorRedLightest","colorOrangeDark","colorWhite","colorPrimary","console","warn"],"version":3,"file":"main.js.map"}
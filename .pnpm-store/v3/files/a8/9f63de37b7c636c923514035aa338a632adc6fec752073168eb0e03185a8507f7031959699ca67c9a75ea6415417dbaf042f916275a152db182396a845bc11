import{isResourceId as r}from"./common";const d=t=>{let i;t.links&&delete t.links;const e=t.data,n=t.included;return Array.isArray(e)?i=e.map(a=>o(a,n)):i=o(e,n),i},l=(t,i=[])=>i.find(n=>t.id===n.id&&t.type===n.type)||t,o=(t,i)=>{const e=Object.assign({id:t.id,type:t.type},t.attributes);return t.relationships&&Object.keys(t.relationships).forEach(n=>{const a=t.relationships[n].data;a?Array.isArray(a)?e[n]=a.map(s=>o(l(s,i),i)):e[n]=o(l(a,i),i):a===null&&(e[n]=null)}),e},c=t=>{const i={},e={};for(const a in t){if(["type","id"].includes(a))continue;const s=t[a];s&&(r(s)||Array.isArray(s)&&r(s[0]))?e[a]={data:s}:i[a]=s}const n={type:t.type,attributes:i,relationships:e};return r(t)&&(n.id=t.id),n};export{d as denormalize,c as normalize};
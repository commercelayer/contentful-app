import { Options, Token } from 'client-oauth2';
export declare type ClientId = string;
export declare type ClientSecret = string;
export declare type CallbackUrl = string;
export declare type Endpoint = string;
declare type TokenData = Token['data'];
declare type AuthData = TokenData & {
    owner_id?: string;
    owner_type?: string;
};
export declare type AuthReturnType = Promise<((Omit<Token, 'refreshToken' | 'refresh'> & {
    data: AuthData;
    expires?: Date;
}) & Partial<Pick<Token, 'refreshToken' | 'refresh'>>) | null>;
export interface AuthConfig {
    clientId: string;
    clientSecret?: string;
    accessTokenUri: string;
    authorizationUri?: string;
    redirectUri?: string;
    username?: string;
    password?: string;
}
export declare type AuthType = 'clientCredentials' | 'owner' | 'authorizationCode' | 'refreshToken';
export declare type AuthScope = string[] | string;
declare type AuthenticateParams = {
    type: AuthType;
    config: AuthConfig;
    scope?: AuthScope;
    code?: string;
    refreshToken?: string;
};
export interface Authenticate {
    (params: AuthenticateParams): AuthReturnType;
}
export interface AuthOptions extends Options {
    clientId: string;
    accessTokenUri: string;
}
export {};

{"mappings":"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","sources":["packages/components/datetime/src/index.ts","packages/components/datetime/src/DateTime/DateTime.tsx","packages/components/datetime/src/utils/index.ts","packages/components/datetime/src/utils/formatDateTimeUtils.ts","packages/components/datetime/src/utils/relativeDateTimeUtils.ts","packages/components/datetime/src/RelativeDateTime/RelativeDateTime.tsx"],"sourcesContent":["export { DateTime } from './DateTime/DateTime';\nexport type { DateTimeProps } from './DateTime/DateTime';\nexport { RelativeDateTime } from './RelativeDateTime/RelativeDateTime';\nexport type { RelativeDateTimeProps } from './RelativeDateTime/RelativeDateTime';\nexport {\n  formatDateAndTime,\n  formatMachineReadableDateTime,\n  formatRelativeDateTime,\n} from './utils';\n","import React from 'react';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nimport type { DateType, DateFormat } from '../types';\nimport { formatDateAndTime, formatMachineReadableDateTime } from '../utils';\n\ninterface DateTimeOwnProps extends CommonProps {\n  /**\n   * The date that will be displayed. It accepts a JS Date, an ISO8601 Timestamp string, or Unix Epoch Milliseconds number\n   */\n  date: DateType;\n  /**\n   * The format in which the date will be presented\n   *\n   * @default full\n   **/\n  format?: DateFormat;\n}\n\nexport type DateTimeProps = PropsWithHTMLElement<DateTimeOwnProps, 'time'>;\n\nconst _DateTime = (\n  {\n    date,\n    format = 'full',\n    testId = 'cf-ui-date-time',\n    ...otherProps\n  }: ExpandProps<DateTimeProps>,\n  ref: React.Ref<HTMLTimeElement>,\n) => {\n  const machineReadableDate = formatMachineReadableDateTime(date);\n\n  return (\n    <time\n      dateTime={machineReadableDate}\n      data-test-id={testId}\n      {...otherProps}\n      ref={ref}\n    >\n      {formatDateAndTime(date, format)}\n    </time>\n  );\n};\n\n/**\n * The DateTime component will format a date to a human friendly format and wrap it in a `<time>` tag\n */\nexport const DateTime = React.forwardRef(_DateTime);\n","export {\n  formatDateAndTime,\n  formatMachineReadableDateTime,\n  formatDate,\n  formatTime,\n  formatWeekdayDate,\n} from './formatDateTimeUtils';\n\nexport {\n  formatRelativeDateTime,\n  formatRelativeToCurrentWeekDateTime,\n} from './relativeDateTimeUtils';\n","import dayjs from 'dayjs';\nimport utcPlugin from 'dayjs/plugin/utc';\ndayjs.extend(utcPlugin);\n\nimport type { DateType, DateFormat } from '../types';\n\n/**\n * A funtion that will return a formatted date string. The format will dependend on the option\n * passed in the second argument.\n * By default, it will return a string with Forma 36â€™s \"full\" format (e.g. Tue, 17 Aug 2021 at 3:45 PM)\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} format - the desired format (\"full\", \"day\", \"weekday\", or \"time\")\n * @returns a formatted date\n *\n * @example\n * formatDateAndTime('2021-08-17T15:45:00') // returns \"Tue, 17 Aug 2021 at 3:45 PM\"\n *\n * @example\n * formatDateAndTime('2021-08-17T15:45:00', 'day') // returns \"17 Aug 2021\"\n */\nexport function formatDateAndTime(\n  date: DateType,\n  format: DateFormat = 'full',\n): string {\n  let template: string;\n\n  switch (format) {\n    case 'day':\n      template = 'DD MMM YYYY'; // 17 Aug 2021\n      break;\n    case 'weekday':\n      template = 'ddd, DD MMM'; // Tue, 17 Aug\n      break;\n    case 'time':\n      template = 'h:mm A'; // 3:45 PM\n      break;\n    case 'fullWithSeconds':\n      template = 'ddd, DD MMM YYYY [at] h:mm:ss A'; // Tue, 17 Aug 2021 at 3:45:67 PM\n      break;\n    default:\n      template = 'ddd, DD MMM YYYY [at] h:mm A'; // Tue, 17 Aug 2021 at 3:45 PM\n  }\n\n  return dayjs(date).format(template);\n}\n\n/**\n * A funtion that will return a machine-readable date string that should be passed to the `datetime` attribute of a `<time>` tag\n * By default, it will return a string with \"YYYY-MM-DDTHH:mm:ss.SSS[Z]\" format\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} format - the desired format (\"full\", \"day\", \"weekday\", or \"time\")\n * @returns a formatted date\n *\n * @example\n * formatMachineReadableDateTime(date) // returns 2019-08-13T10:00:00.000Z\n *\n * @example\n * formatMachineReadableDateTime(date, 'day') // returns 2019-08-13\n */\nexport function formatMachineReadableDateTime(\n  date: DateType,\n  format: DateFormat = 'full',\n): string {\n  let template: string;\n\n  switch (format) {\n    case 'day':\n      template = 'YYYY-MM-DD'; // 2019-08-24\n      break;\n    case 'weekday':\n      template = 'MM-DD'; // 08-24\n      break;\n    case 'time':\n      template = 'HH:mm:ss.SSS'; // 15:44:07.000\n      break;\n    default:\n      template = 'YYYY-MM-DDTHH:mm:ss.SSS[Z]'; // 2019-08-24T15:44:07.000Z\n  }\n\n  return dayjs(date).utc().format(template);\n}\n\n/**\n * @example\n * > formatDate(date)\n * 13 Aug 2019\n */\nexport const formatDate = (date: DateType): string => {\n  return formatDateAndTime(date, 'day');\n};\n\n/**\n * @example\n * > formatTime(date)\n * 8:00 AM\n */\nexport const formatTime = (date: DateType): string => {\n  return formatDateAndTime(date, 'time');\n};\n\n/**\n * @example\n * > formatWeekdayDate(date)\n * Mon, 12 Aug\n */\nexport const formatWeekdayDate = (date: DateType): string => {\n  return formatDateAndTime(date, 'weekday');\n};\n","import dayjs from 'dayjs';\nimport utcPlugin from 'dayjs/plugin/utc';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport calendarPlugin from 'dayjs/plugin/calendar';\ndayjs.extend(utcPlugin);\ndayjs.extend(relativeTime);\ndayjs.extend(calendarPlugin);\n\nimport type { DateType } from '../types';\n\n/**\n * A function that will return a string with how far a given date is in the past or future,\n * using a baseDate as reference. If the baseDate is not passed, the function will use today as reference.\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} baseDate - the date that should be used as a reference (default is \"today\")\n * @returns a relative date\n *\n * @example\n * // Considering today as 18.08.2021\n * formatRelativeDateTime('2021-08-17T15:45:00') // returns \"a day ago\"\n *\n * @example\n * formatRelativeDateTime('2021-08-17T15:45:00', '2021-08-16') // returns \"in a day\"\n */\nexport function formatRelativeDateTime(\n  date: DateType,\n  baseDate: DateType = new Date(),\n) {\n  return dayjs(date).from(baseDate);\n}\n\n/**\n * A function that formats a date relative to Today or to the `baseDate` if passed.\n * If the date is not today, it will return a string with \"Yesterday ...\", \"Tomorrow ...\", etc\n * If the date is not in the current week, it return a string with \"DD MMM YYYY\" format\n * If the date is today, it will return a string with \"... ago\" or \"in ...\"\n *\n * @param {DateType} date - the date to be formatted\n * @param {DateFormat} baseDate - the date that should be used as a reference (default is \"today\")\n * @returns a relative date\n *\n * @example\n * // Considering today as 18.08.2021\n * formatRelativeToCurrentWeekDateTime('2021-08-17T15:45:00') // returns \"Yesterday at 3:45 PM\"\n *\n * @example\n * formatRelativeToCurrentWeekDateTime('2021-08-17T15:45:00', '2021-08-16') // returns \"Tomorrow at 3:45 PM\"\n */\nexport function formatRelativeToCurrentWeekDateTime(\n  date: DateType,\n  baseDate: DateType = new Date(),\n) {\n  const isToday = dayjs(date).isSame(baseDate, 'day');\n\n  if (!isToday) {\n    // if the date is not today, we display it with \"Yesterday\", \"Tomorrow\", etc.\n    // and if the date is not in the current week then it will display \"17 Aug 2021\"\n    return dayjs(date).calendar(baseDate, {\n      sameElse: 'DD MMM YYYY',\n    });\n  }\n\n  // returns \"... ago\"\n  return formatRelativeDateTime(date, baseDate);\n}\n","import React from 'react';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nimport dayjs from 'dayjs';\nimport utcPlugin from 'dayjs/plugin/utc';\nimport relativeTime from 'dayjs/plugin/relativeTime';\nimport calendarPlugin from 'dayjs/plugin/calendar';\ndayjs.extend(utcPlugin);\ndayjs.extend(relativeTime);\ndayjs.extend(calendarPlugin);\n\nimport type { DateType } from '../types';\nimport {\n  formatMachineReadableDateTime,\n  formatRelativeDateTime,\n  formatRelativeToCurrentWeekDateTime,\n} from '../utils';\n\ninterface RelativeDateTimeInternalProps extends CommonProps {\n  /**\n   * The date that will be displayed. It accepts a JS Date, an ISO8601 Timestamp string, or Unix Epoch Milliseconds number\n   */\n  date: DateType;\n  /**\n   * If a value is passed to baseDate, then the component will compare both dates and return the time between them.\n   * If no value is passed then the date will be compared to \"now\"\n   *\n   * @default \"Now\"\n   */\n  baseDate?: DateType;\n  /**\n   * Sets the date to be relative only if it is in the current week\n   * @default false\n   */\n  isRelativeToCurrentWeek?: boolean;\n}\n\nexport type RelativeDateTimeProps = PropsWithHTMLElement<\n  RelativeDateTimeInternalProps,\n  'time'\n>;\n\nconst _RelativeDateTime = (\n  {\n    date,\n    baseDate,\n    isRelativeToCurrentWeek = false,\n    testId = 'cf-ui-relative-date-time',\n    ...otherProps\n  }: ExpandProps<RelativeDateTimeProps>,\n  ref: React.Ref<HTMLTimeElement>,\n) => {\n  const now = new Date();\n  const referenceDate = baseDate ?? now;\n  const dayjsDate = dayjs(date);\n  const machineReadableDate = formatMachineReadableDateTime(date);\n\n  let relativeDate: string;\n\n  if (isRelativeToCurrentWeek && !dayjsDate.isSame(referenceDate, 'day')) {\n    /**\n     * if isRelativeToCurrentWeek is true and the date is not today, we display the date with Yesterday, Tomorrow, etc\n     * or, if the date is not in the current week, it displays \"17 Aug 2021\"\n     *\n     * check formatRelativeToCurrentWeekDateTime for more details\n     */\n    relativeDate = formatRelativeToCurrentWeekDateTime(date, referenceDate);\n  } else {\n    // otherwise we display it with \"... ago\" or \"in ...\" notation\n    relativeDate = formatRelativeDateTime(date, referenceDate);\n  }\n\n  return (\n    <time\n      dateTime={machineReadableDate}\n      data-test-id={testId}\n      {...otherProps}\n      ref={ref}\n    >\n      {relativeDate}\n    </time>\n  );\n};\n\n/**\n * The RelativeDateTime will show a `date` relative to \"now\" or to the `baseDate`\n * (e.g. in a day, in one month, one month ago, etc).\n */\nexport const RelativeDateTime = React.forwardRef(_RelativeDateTime);\n"],"names":["DateTime","DateTimeProps","RelativeDateTime","RelativeDateTimeProps","formatDateAndTime","formatMachineReadableDateTime","formatRelativeDateTime","React","CommonProps","PropsWithHTMLElement","ExpandProps","DateType","DateFormat","DateTimeOwnProps","date","format","_DateTime","testId","otherProps","ref","Ref","HTMLTimeElement","machineReadableDate","forwardRef","formatDate","formatTime","formatWeekdayDate","formatRelativeToCurrentWeekDateTime","dayjs","utcPlugin","extend","template","utc","relativeTime","calendarPlugin","baseDate","Date","from","isToday","isSame","calendar","sameElse","RelativeDateTimeInternalProps","isRelativeToCurrentWeek","_RelativeDateTime","now","referenceDate","dayjsDate","relativeDate"],"version":3,"file":"module.js.map"}
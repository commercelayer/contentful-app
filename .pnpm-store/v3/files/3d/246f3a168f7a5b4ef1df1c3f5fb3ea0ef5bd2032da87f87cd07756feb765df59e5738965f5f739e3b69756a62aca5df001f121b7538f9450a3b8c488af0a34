{"mappings":"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","sources":["packages/components/icon/src/index.ts","packages/components/icon/src/generateIcon.tsx","packages/components/icon/src/Icon.tsx"],"sourcesContent":["export { generateIcon } from './generateIcon';\nexport type { GeneratedIconProps } from './generateIcon';\nexport { Icon } from './Icon';\nexport type { IconProps, IconComponent, IconSize, IconVariant } from './Icon';\n","import React from 'react';\nimport type { ReactElement } from 'react';\n\nimport { Icon } from './Icon';\nimport type { IconProps } from './Icon';\n\nexport type GeneratedIconProps = Omit<\n  IconProps,\n  'as' | 'children' | 'name' | 'viewBox'\n> & { children?: never };\n\ntype GenerateIconParameters = {\n  /**\n   * Icon name is used as the generated icon's component display name\n   */\n  name?: string;\n  /**\n   * The SVG path(s) to render in the icon wrapper\n   */\n  path: ReactElement;\n  /**\n   * A collection of default props to set on the generated icon\n   */\n  props?: GeneratedIconProps;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: IconProps['trimmed'];\n  /**\n   * Custom SVG viewBox attribute to use for the generated icon\n   */\n  viewBox?: IconProps['viewBox'];\n};\n\nexport function generateIcon({\n  name,\n  path,\n  props: defaultProps,\n  trimmed,\n  viewBox,\n}: GenerateIconParameters) {\n  const Component = function (props: IconProps) {\n    return (\n      <Icon viewBox={viewBox} {...defaultProps} {...props} trimmed={trimmed}>\n        {path}\n      </Icon>\n    );\n  };\n\n  if (name) {\n    Component.displayName = name;\n  }\n\n  return Component;\n}\n","import { css, cx } from 'emotion';\nimport React, { forwardRef } from 'react';\nimport tokens from '@contentful/f36-tokens';\nimport { Box } from '@contentful/f36-core';\nimport type {\n  CommonProps,\n  PolymorphicComponent,\n  PolymorphicProps,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport type {\n  ComponentType,\n  ExoticComponent,\n  ReactElement,\n  SVGAttributes,\n} from 'react';\n\nconst ICON_DEFAULT_TAG = 'svg';\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport type IconComponent = ExoticComponent<any> | ComponentType<any>;\n\nexport type IconSize = 'large' | 'medium' | 'small' | 'tiny';\n\nexport type IconVariant =\n  | 'negative'\n  | 'positive'\n  | 'primary'\n  | 'secondary'\n  | 'warning'\n  | 'muted'\n  | 'white';\n\nconst sizes: { [key in IconSize]: { [key in 'height' | 'width']: string } } = {\n  large: {\n    height: '32px',\n    width: '32px',\n  },\n  medium: {\n    height: '24px',\n    width: '24px',\n  },\n  small: {\n    height: '18px',\n    width: '18px',\n  },\n  tiny: {\n    height: '16px',\n    width: '16px',\n  },\n};\n\nconst fills: { [key in IconVariant]: string } = {\n  muted: tokens.gray600,\n  negative: tokens.colorNegative,\n  positive: tokens.colorPositive,\n  primary: tokens.blue600,\n  secondary: tokens.gray900,\n  warning: tokens.colorWarning,\n  white: tokens.colorWhite,\n};\n\nexport type IconInternalProps = CommonProps & {\n  children?: ReactElement | ReactElement[];\n  /**\n   * Determines the size of the icon\n   */\n  size?: IconSize;\n  /**\n   * Whether or not to trim the icon width, i.e. set `width` to `auto`\n   */\n  trimmed?: boolean;\n  /**\n   * Determines the fill color used\n   */\n  variant?: IconVariant;\n  /**\n   * Custom SVG viewBox attribute to use\n   */\n  viewBox?: SVGAttributes<SVGSVGElement>['viewBox'];\n};\n\nexport type IconProps<\n  E extends React.ElementType = IconComponent\n> = PolymorphicProps<\n  IconInternalProps,\n  E,\n  'as' | 'children' | 'width' | 'height'\n>;\n\nconst useAriaHidden = (\n  props: Pick<\n    IconProps<typeof ICON_DEFAULT_TAG>,\n    'aria-label' | 'aria-labelledby'\n  >,\n) => {\n  const ariaLabel = props['aria-label'];\n  const ariaLabelBy = props['aria-labelledby'];\n\n  if (ariaLabel || ariaLabelBy) {\n    return {};\n  }\n\n  return {\n    'aria-hidden': true,\n  };\n};\n\nexport function _Icon<E extends React.ElementType = IconComponent>(\n  {\n    as,\n    children,\n    className,\n    variant = 'primary',\n    size = 'small',\n    testId = 'cf-ui-icon',\n    trimmed,\n    viewBox = '0 0 24 24',\n    ...otherProps\n  }: IconProps<E>,\n  forwardedRef: React.Ref<any>,\n) {\n  const shared = {\n    className: cx(\n      css({\n        fill: fills[variant],\n        height: sizes[size].height,\n        width: trimmed ? 'auto' : sizes[size].width,\n      }),\n      className,\n    ),\n    ref: forwardedRef,\n    testId,\n  };\n\n  const ariaHiddenProps = useAriaHidden(otherProps);\n\n  if (as) {\n    return (\n      <Box\n        display=\"inline-block\"\n        {...ariaHiddenProps}\n        {...otherProps}\n        {...shared}\n        as={as as React.ElementType}\n      />\n    );\n  }\n\n  return (\n    <Box\n      viewBox={viewBox}\n      display=\"inline-block\"\n      {...ariaHiddenProps}\n      {...otherProps}\n      as={ICON_DEFAULT_TAG}\n      {...shared}\n    >\n      {children}\n    </Box>\n  );\n}\n\nexport const Icon: PolymorphicComponent<\n  ExpandProps<IconInternalProps>,\n  typeof ICON_DEFAULT_TAG,\n  'width' | 'height'\n> = forwardRef(_Icon);\n"],"names":["generateIcon","GeneratedIconProps","Icon","IconProps","IconComponent","IconSize","IconVariant","React","ReactElement","Omit","children","GenerateIconParameters","name","path","props","trimmed","viewBox","defaultProps","Component","displayName","forwardRef","tokens","Box","CommonProps","PolymorphicComponent","PolymorphicProps","ExpandProps","ComponentType","ExoticComponent","SVGAttributes","ICON_DEFAULT_TAG","sizes","large","height","width","medium","small","tiny","fills","muted","gray600","negative","colorNegative","positive","colorPositive","primary","blue600","secondary","gray900","warning","colorWarning","white","colorWhite","IconInternalProps","size","variant","SVGSVGElement","ElementType","E","useAriaHidden","Pick","ariaLabel","ariaLabelBy","_Icon","as","className","testId","otherProps","forwardedRef","Ref","shared","fill","ref","ariaHiddenProps"],"version":3,"file":"module.js.map"}
{"mappings":"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","sources":["packages/components/skeleton/src/index.ts","packages/components/skeleton/src/SkeletonBodyText/SkeletonBodyText.tsx","packages/components/skeleton/src/SkeletonText/SkeletonText.tsx","packages/components/skeleton/src/SkeletonContainer/SkeletonContainer.tsx","packages/components/skeleton/src/SkeletonDisplayText/SkeletonDisplayText.tsx","packages/components/skeleton/src/SkeletonImage/SkeletonImage.tsx","packages/components/skeleton/src/SkeletonRow/SkeletonRow.tsx","packages/components/skeleton/src/SkeletonRow/SkeletonTableCell/SkeletonTableCell.tsx"],"sourcesContent":["export { SkeletonBodyText } from './SkeletonBodyText/SkeletonBodyText';\nexport type { SkeletonBodyTextProps } from './SkeletonBodyText/SkeletonBodyText';\nexport { SkeletonContainer } from './SkeletonContainer/SkeletonContainer';\nexport type { SkeletonContainerProps } from './SkeletonContainer/SkeletonContainer';\nexport { SkeletonDisplayText } from './SkeletonDisplayText/SkeletonDisplayText';\nexport type { SkeletonDisplayTextProps } from './SkeletonDisplayText/SkeletonDisplayText';\nexport { SkeletonImage } from './SkeletonImage/SkeletonImage';\nexport type { SkeletonImageProps } from './SkeletonImage/SkeletonImage';\nexport { SkeletonRow } from './SkeletonRow/SkeletonRow';\nexport type { SkeletonRowProps } from './SkeletonRow/SkeletonRow';\nexport { SkeletonText } from './SkeletonText/SkeletonText';\nexport type { SkeletonTextProps } from './SkeletonText/SkeletonText';\n","import React from 'react';\n\nimport { SkeletonText, SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonBodyTextProps extends SkeletonTextProps {}\n\nexport const SkeletonBodyText = ({\n  lineHeight = 16,\n  marginBottom = 8,\n  numberOfLines = 2,\n  offsetLeft = 0,\n  offsetTop = 0,\n  ...otherProps\n}: SkeletonBodyTextProps) => {\n  return (\n    <SkeletonText\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={\n        numberOfLines! > 0 // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          ? numberOfLines\n          : 1\n      }\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      {...otherProps}\n    />\n  );\n};\n","import React, { useCallback } from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonTextProps {\n  /**\n   * A number of skeleton likes\n   */\n  numberOfLines?: number;\n  /**\n   * A distance between top of the container and the first line (in pixels)\n   */\n  offsetTop?: stringOrNumber;\n  /**\n   * A distance between left of the container and the beginning of lines (in pixels)\n   */\n  offsetLeft?: stringOrNumber;\n  /**\n   * A height of a one line (in pixels)\n   */\n  lineHeight?: stringOrNumber;\n  /**\n   * Spacing between lines (in pixels)\n   */\n  marginBottom?: stringOrNumber;\n  /**\n   * A width of a line\n   */\n  width?: stringOrNumber;\n}\n\nexport const SkeletonText = ({\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  lineHeight = 21,\n  marginBottom = 20,\n  width,\n}: SkeletonTextProps) => {\n  const getLineWidth = useCallback(\n    (lastLine: boolean) => {\n      if (width) {\n        return width;\n      }\n\n      return lastLine ? '80%' : '100%';\n    },\n    [width],\n  );\n\n  return (\n    <React.Fragment>\n      {Array.from(Array(numberOfLines)).map((_, index) => (\n        <rect\n          key={`skeleton-display-text-${index}`} // eslint-disable-line\n          x={offsetLeft}\n          y={\n            index * (+lineHeight! + +marginBottom!) + +offsetTop! // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          }\n          rx=\"0\"\n          ry=\"0\"\n          width={getLineWidth(\n            numberOfLines! > 1 && numberOfLines! - index === 1, // eslint-disable-line @typescript-eslint/no-non-null-assertion\n          )}\n          height={lineHeight}\n        />\n      ))}\n    </React.Fragment>\n  );\n};\n\nSkeletonText.displayName = 'SkeletonText';\n","import React from 'react';\nimport { Box, useId } from '@contentful/f36-core';\nimport type { CommonProps } from '@contentful/f36-core';\n\nexport interface SkeletonContainerProps extends CommonProps {\n  /**\n   * Background color of the skeleton\n   */\n  backgroundColor?: string;\n  /**\n   * Background opacity of the skeleton\n   */\n  backgroundOpacity?: number;\n  /**\n   * Whether skeleton has animation or not\n   */\n  isAnimated?: boolean;\n  /**\n   * Speed of the animation\n   */\n  speed?: number | string;\n  /**\n   * Color of the foreground skeleton items\n   */\n  foregroundColor?: string;\n  /**\n   * Opacity of the foreground skeleton items\n   */\n  foregroundOpacity?: number;\n  /**\n   * Width of the SVG element\n   */\n  svgWidth?: string | number;\n  /**\n   * Height of the SVG element\n   */\n  svgHeight?: string | number;\n  /**\n   * Label attribute\n   */\n  ariaLabel?: string;\n  width?: number | string;\n  height?: number | string;\n  clipId?: string;\n  gradientId?: string;\n  animateId?: string;\n  preserveAspectRatio?: string;\n  children: React.ReactNode;\n}\n\nexport const SkeletonContainer = ({\n  children,\n  testId = 'cf-ui-skeleton-form',\n  ariaLabel = 'Loading component...',\n  width = '100%',\n  height = '100%',\n  preserveAspectRatio,\n  backgroundColor = '#e5ebed',\n  backgroundOpacity = 1,\n  isAnimated = true,\n  speed = 2,\n  foregroundColor = '#f7f9fa',\n  foregroundOpacity = 1,\n  svgWidth = '100%',\n  svgHeight = '100%',\n  clipId,\n  gradientId,\n  animateId,\n  ...otherProps\n}: SkeletonContainerProps) => {\n  const uniqueClipId = useId(clipId, 'cf-ui-skeleton-clip');\n  const uniqueGradientId = useId(gradientId, 'cf-ui-skeleton-clip-gradient');\n  const randomAnimateId = useId(undefined, 'animation');\n  const uniqueAnimateId = animateId || randomAnimateId;\n\n  return (\n    <Box\n      as=\"svg\"\n      display=\"block\"\n      role=\"img\"\n      aria-label={ariaLabel}\n      preserveAspectRatio={preserveAspectRatio}\n      width={svgWidth}\n      height={svgHeight}\n      testId={testId}\n      {...otherProps}\n    >\n      {ariaLabel ? <title>{ariaLabel}</title> : null}\n      <rect\n        x=\"0\"\n        y=\"0\"\n        width={width}\n        height={height}\n        clipPath={`url(#${uniqueClipId})`}\n        style={{ fill: `url(#${uniqueGradientId})` }}\n      />\n\n      <defs>\n        <clipPath id={uniqueClipId}>{children}</clipPath>\n\n        <linearGradient id={uniqueGradientId}>\n          <stop\n            offset=\"0%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                id={uniqueAnimateId}\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"50%\"\n            stopColor={foregroundColor}\n            stopOpacity={foregroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                begin={`${uniqueAnimateId}.begin+0.25s`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n          <stop\n            offset=\"100%\"\n            stopColor={backgroundColor}\n            stopOpacity={backgroundOpacity}\n          >\n            {isAnimated && (\n              <animate\n                attributeName=\"stop-color\"\n                begin={`${uniqueAnimateId}.begin+0.5s`}\n                values={`${backgroundColor}; ${foregroundColor}; ${backgroundColor}`}\n                dur={`${speed}s`}\n                repeatCount=\"indefinite\"\n              />\n            )}\n          </stop>\n        </linearGradient>\n      </defs>\n    </Box>\n  );\n};\n\nSkeletonContainer.displayName = 'SkeletonContainer';\n","import React from 'react';\n\nimport { SkeletonText, SkeletonTextProps } from '../SkeletonText/SkeletonText';\n\n// eslint-disable-next-line @typescript-eslint/no-empty-interface\nexport interface SkeletonDisplayTextProps extends SkeletonTextProps {}\n\nexport const SkeletonDisplayText = ({\n  lineHeight = 21,\n  marginBottom = 20,\n  numberOfLines = 1,\n  offsetLeft = 0,\n  offsetTop = 0,\n  width = 100,\n  ...otherProps\n}: SkeletonDisplayTextProps): React.ReactElement => {\n  return (\n    <SkeletonText\n      lineHeight={lineHeight}\n      marginBottom={marginBottom}\n      numberOfLines={numberOfLines}\n      offsetLeft={offsetLeft}\n      offsetTop={offsetTop}\n      width={width}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonDisplayText.displayName = 'SkeletonDisplayText';\n","import React from 'react';\n\ntype stringOrNumber = string | number;\n\nexport interface SkeletonImageProps {\n  width?: stringOrNumber;\n  height?: stringOrNumber;\n  radiusX?: stringOrNumber;\n  radiusY?: stringOrNumber;\n  offsetLeft?: stringOrNumber;\n  offsetTop?: stringOrNumber;\n  testId?: string;\n}\n\nexport const SkeletonImage = ({\n  testId = 'cf-ui-skeleton-image',\n  offsetLeft,\n  offsetTop,\n  width = 70,\n  height = 70,\n  radiusX = 0,\n  radiusY = 0,\n  ...otherProps\n}: SkeletonImageProps): React.ReactElement => {\n  return (\n    <rect\n      x={offsetLeft}\n      y={offsetTop}\n      rx={radiusX}\n      ry={radiusY}\n      width={width}\n      height={height}\n      data-test-id={testId}\n      {...otherProps}\n    />\n  );\n};\n\nSkeletonImage.displayName = 'SkeletonImage';\n","import React from 'react';\nimport { TableRow } from '@contentful/f36-table';\n\nimport { SkeletonTableCell } from './SkeletonTableCell/SkeletonTableCell';\n\nexport interface SkeletonRowProps {\n  /** Defines the number of rows to be rendered */\n  rowCount?: number;\n  /** Defines the number of columns to be rendered */\n  columnCount?: number;\n}\n\nexport const SkeletonRow = ({\n  columnCount = 5,\n  rowCount = 1,\n}: SkeletonRowProps) => {\n  return (\n    <>\n      {Array.from(Array(rowCount)).map((_, rowIndex) => (\n        <TableRow key={rowIndex}>\n          {Array.from(Array(columnCount)).map((_, cellIndex) => (\n            <SkeletonTableCell key={cellIndex} />\n          ))}\n        </TableRow>\n      ))}\n    </>\n  );\n};\n","import React from 'react';\nimport { TableCell } from '@contentful/f36-table';\n\nimport { SkeletonContainer } from '../../SkeletonContainer/SkeletonContainer';\nimport { SkeletonBodyText } from '../../SkeletonBodyText/SkeletonBodyText';\n\nexport const SkeletonTableCell = () => {\n  return (\n    <TableCell>\n      <SkeletonContainer\n        svgHeight={16} // This is equal to the default height of a SkeletonText line, if no value is passed the svg will be bigger than the line\n      >\n        <SkeletonBodyText numberOfLines={1} />\n      </SkeletonContainer>\n    </TableCell>\n  );\n};\n"],"names":["SkeletonBodyText","SkeletonBodyTextProps","SkeletonContainer","SkeletonContainerProps","SkeletonDisplayText","SkeletonDisplayTextProps","SkeletonImage","SkeletonImageProps","SkeletonRow","SkeletonRowProps","SkeletonText","SkeletonTextProps","React","lineHeight","marginBottom","numberOfLines","offsetLeft","offsetTop","otherProps","useCallback","stringOrNumber","width","getLineWidth","lastLine","Array","from","map","_","index","displayName","Box","useId","CommonProps","backgroundColor","backgroundOpacity","isAnimated","speed","foregroundColor","foregroundOpacity","svgWidth","svgHeight","ariaLabel","height","clipId","gradientId","animateId","preserveAspectRatio","children","ReactNode","testId","uniqueClipId","uniqueGradientId","randomAnimateId","undefined","uniqueAnimateId","fill","ReactElement","radiusX","radiusY","TableRow","SkeletonTableCell","rowCount","columnCount","rowIndex","cellIndex","TableCell"],"version":3,"file":"module.js.map"}
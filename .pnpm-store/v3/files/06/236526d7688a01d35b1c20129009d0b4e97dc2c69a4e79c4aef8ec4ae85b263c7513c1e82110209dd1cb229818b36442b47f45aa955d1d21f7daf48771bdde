{"mappings":"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","sources":["packages/components/pagination/src/index.ts","packages/components/pagination/src/Pagination.tsx","packages/components/pagination/src/utils.tsx"],"sourcesContent":["export { Pagination } from './Pagination';\nexport type { PaginationProps } from './Pagination';\nexport { getRangeText } from './utils';\n","import React from 'react';\n\nimport { Button } from '@contentful/f36-button';\nimport { Select } from '@contentful/f36-forms';\nimport { Stack, Flex } from '@contentful/f36-core';\nimport type { CommonProps } from '@contentful/f36-core';\nimport { ChevronLeftIcon, ChevronRightIcon } from '@contentful/f36-icons';\nimport { Text } from '@contentful/f36-typography';\n\nimport { getRangeText } from './utils';\n\nexport interface PaginationProps extends CommonProps {\n  /**\n   * Sets which page is active on the Pagination\n   * @default 0\n   */\n  activePage?: number;\n  /**\n   * Sets if the user is on the last page of navigation\n   * @default false\n   */\n  isLastPage?: boolean;\n  /**\n   * Number of items are actually on the page.\n   * If no value is set it defaults to viewPerPage value\n   * @default 20\n   */\n  pageLength?: number;\n  /**\n   * Total amount of items the pagination is applied to.\n   */\n  totalItems?: number;\n  /**\n   * Sets if the View per page selector is shown\n   * @default false\n   */\n  showViewPerPage?: boolean;\n  /**\n   * Sets how many items are displayed per page.\n   * Must be one of the values passed on viewPerPageOptions prop.\n   * @default 20\n   */\n  itemsPerPage?: number;\n  /**\n   * Array of options to show on the View select\n   * @default [20, 100]\n   */\n  viewPerPageOptions?: number[];\n  /**\n   * Handler function called when user changes the view per page selector.\n   */\n  onViewPerPageChange?: (items: number) => void;\n  /**\n   * Handler function called when user navigates to another page on the pagination.\n   */\n  onPageChange: (page: number) => void;\n}\n\nfunction _Pagination(props: PaginationProps, ref: React.Ref<HTMLDivElement>) {\n  const {\n    className,\n    onPageChange,\n    testId = 'cf-ui-pagination',\n    activePage: propsActivePage,\n    itemsPerPage = 20,\n    pageLength,\n    isLastPage: propsLastPage = false,\n    activePage = 0,\n    viewPerPageOptions = [20, 100],\n    showViewPerPage = false,\n    totalItems,\n    onViewPerPageChange,\n    ...otherProps\n  } = props;\n  const isFirstPage = activePage === 0;\n  const isLastPage =\n    propsLastPage ||\n    (totalItems && (activePage + 1) * itemsPerPage >= totalItems);\n  const totalText = getRangeText({\n    totalItems,\n    activePage,\n    itemsPerPage,\n    pageLength,\n    isLastPage,\n  });\n\n  return (\n    <Flex\n      flexDirection=\"row\"\n      justifyContent=\"space-between\"\n      fullWidth\n      className={className}\n      testId={testId}\n      ref={ref}\n      {...otherProps}\n    >\n      {showViewPerPage && (\n        <Stack>\n          <Text fontColor=\"gray500\">View</Text>\n          <Select\n            value={`${itemsPerPage}`}\n            onChange={(e) =>\n              onViewPerPageChange && onViewPerPageChange(+e.target.value)\n            }\n          >\n            {viewPerPageOptions.map((option) => (\n              <Select.Option key={option} value={option}>\n                {option}\n              </Select.Option>\n            ))}\n          </Select>\n        </Stack>\n      )}\n      <Stack flexGrow={1} justifyContent=\"flex-end\">\n        <Text fontColor=\"gray500\">{totalText}</Text>\n        <Stack spacing=\"spacingS\">\n          {!isFirstPage && (\n            <Button\n              aria-label=\"To previous page\"\n              startIcon={<ChevronLeftIcon />}\n              variant=\"secondary\"\n              onClick={() => onPageChange(activePage - 1)}\n              testId=\"cf-ui-pagination-previous\"\n            >\n              Previous\n            </Button>\n          )}\n          {!isLastPage && (\n            <Button\n              aria-label=\"To next page\"\n              variant=\"secondary\"\n              endIcon={<ChevronRightIcon />}\n              onClick={() => onPageChange(activePage + 1)}\n              testId=\"cf-ui-pagination-next\"\n            >\n              Next\n            </Button>\n          )}\n        </Stack>\n      </Stack>\n    </Flex>\n  );\n}\n\n_Pagination.displayName = 'Pagination';\n\nexport const Pagination = React.forwardRef(_Pagination);\n","export function getRangeText({\n  activePage,\n  itemsPerPage,\n  totalItems = 0,\n  pageLength,\n  isLastPage = false,\n}: {\n  activePage: number;\n  itemsPerPage: number;\n  totalItems?: number;\n  pageLength?: number;\n  isLastPage?: boolean;\n}): string {\n  const total = totalItems ? `of ${totalItems} items` : '';\n  const firstItem = activePage * itemsPerPage + 1;\n  if (isLastPage && pageLength) {\n    return [`${firstItem} - ${firstItem - 1 + pageLength}`, total].join(' ');\n  }\n  if (totalItems) {\n    const lastItem = Math.min(firstItem - 1 + itemsPerPage, totalItems);\n    return [`${firstItem} - ${lastItem}`, total].join(' ');\n  }\n  return [`${firstItem} - ${firstItem - 1 + itemsPerPage}`, total].join(' ');\n}\n"],"names":["Pagination","PaginationProps","getRangeText","React","Button","Select","Stack","Flex","CommonProps","ChevronLeftIcon","ChevronRightIcon","Text","activePage","isLastPage","pageLength","totalItems","showViewPerPage","itemsPerPage","viewPerPageOptions","onViewPerPageChange","items","onPageChange","page","_Pagination","props","ref","Ref","HTMLDivElement","className","testId","propsActivePage","propsLastPage","otherProps","isFirstPage","totalText","e","target","value","map","option","displayName","forwardRef","total","firstItem","join","lastItem","Math","min"],"version":3,"file":"module.js.map"}
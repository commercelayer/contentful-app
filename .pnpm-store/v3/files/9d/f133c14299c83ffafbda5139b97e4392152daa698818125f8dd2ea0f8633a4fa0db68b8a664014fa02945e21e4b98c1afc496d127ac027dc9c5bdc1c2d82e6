{"mappings":"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","sources":["packages/components/pill/src/index.ts","packages/components/pill/src/Pill.tsx","packages/components/pill/src/Pill.styles.ts"],"sourcesContent":["export { Pill } from './Pill';\nexport type { PillProps } from './Pill';\n","import React from 'react';\nimport { cx } from 'emotion';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\nimport { Tooltip } from '@contentful/f36-tooltip';\nimport { DragIcon, CloseIcon } from '@contentful/f36-icons';\nimport { Button } from '@contentful/f36-button';\nimport { PillVariants } from './types';\nimport { getPillStyles } from './Pill.styles';\n\nexport type PillInternalProps = CommonProps & {\n  /**\n   * Text that will be shown on the pill\n   */\n  label: string;\n  /**\n   * Function that handles when the close icon is clicked. Close icon visibility depends on if this property is set.\n   */\n  onClose?: () => void;\n  /**\n   * Function that handles when the pill is dragged. Drag icon visibility depends on if this property is set.\n   */\n  onDrag?: () => void;\n  /**\n   * Custom component to be used as handler for the drag functionality.\n   */\n  dragHandleComponent?: React.ReactNode;\n  /**\n   * Determines style variation of Pill component\n   * @default idle\n   */\n  variant?: PillVariants;\n};\n\nexport type PillProps = PropsWithHTMLElement<PillInternalProps, 'div'>;\n\nexport const Pill = React.forwardRef<HTMLDivElement, ExpandProps<PillProps>>(\n  (props, ref) => {\n    const {\n      label,\n      onClose,\n      testId = 'cf-ui-pill',\n      onDrag,\n      className,\n      dragHandleComponent,\n      variant = 'idle',\n      ...otherProps\n    } = props;\n\n    const styles = getPillStyles(variant);\n    const [textIsTruncated, setTextIsTruncated] = React.useState(false);\n\n    const trackRefChange = React.useCallback(\n      (ref: HTMLDivElement | null) => {\n        if (!ref) {\n          return;\n        }\n        const { scrollWidth, offsetWidth } = ref.parentElement;\n        setTextIsTruncated(scrollWidth > offsetWidth);\n      },\n      [setTextIsTruncated],\n    );\n\n    return (\n      <div\n        className={cx(styles.pill, className)}\n        data-test-id={testId}\n        onDrag={onDrag}\n        ref={ref}\n        {...otherProps}\n      >\n        {onDrag &&\n          (dragHandleComponent ? (\n            dragHandleComponent\n          ) : (\n            <span aria-label=\"Drag handler\" className={styles.dragIcon}>\n              <DragIcon className={styles.icon} variant=\"muted\" />\n            </span>\n          ))}\n        <Tooltip\n          content={label}\n          maxWidth=\"none\"\n          targetWrapperClassName={styles.label}\n          isDisabled={!textIsTruncated}\n        >\n          <span ref={trackRefChange}>{label}</span>\n        </Tooltip>\n        {onClose && (\n          <Button\n            type=\"button\"\n            variant=\"transparent\"\n            startIcon={<CloseIcon aria-label=\"Close\" />}\n            aria-label=\"Close\"\n            onClick={onClose}\n            className={styles.closeButton}\n          />\n        )}\n      </div>\n    );\n  },\n);\n\nPill.displayName = 'Pill';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\nimport { PillVariants } from './types';\n\nconst getCloseButtonStyle = () => {\n  return css({\n    borderLeft: `1px solid ${tokens.gray400}`,\n    borderTopLeftRadius: 0,\n    borderBottomLeftRadius: 0,\n    padding: tokens.spacingXs,\n    minHeight: 'auto',\n    transition: `background ${tokens.transitionDurationShort} ${tokens.transitionEasingDefault},\n    opacity ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n    '&:focus': {\n      boxShadow: tokens.glowMuted,\n      borderLeftColor: tokens.gray300,\n    },\n    '&:hover, &:focus, &:active': {\n      backgroundColor: tokens.gray300,\n    },\n  });\n};\n\nconst getLabelStyle = () => {\n  return css({\n    color: tokens.gray700,\n    lineHeight: tokens.lineHeightM,\n    padding: tokens.spacingXs,\n    fontSize: tokens.fontSizeM,\n    flexGrow: 2,\n    whiteSpace: 'nowrap',\n    textOverflow: 'ellipsis',\n    overflow: 'hidden',\n  });\n};\n\nconst getPillStyle = (variant: PillVariants) => {\n  const variantStyle = (variant: PillVariants) => {\n    switch (variant) {\n      case 'active':\n        return {\n          background: tokens.gray300,\n        };\n      case 'deleted':\n        return {\n          background: tokens.gray200,\n          textDecoration: 'line-through',\n          opacity: '0.5',\n        };\n      default:\n        return {\n          background: tokens.gray200,\n        };\n    }\n  };\n\n  return css({\n    display: 'inline-flex',\n    fontFamily: tokens.fontStackPrimary,\n    alignItems: 'center',\n    borderRadius: tokens.borderRadiusSmall,\n    border: 'none',\n    padding: 0,\n    maxWidth: '100%',\n    ...variantStyle(variant),\n  });\n};\n\nexport function getPillStyles(variant: PillVariants) {\n  return {\n    closeButton: getCloseButtonStyle(),\n    label: getLabelStyle(),\n    icon: css({\n      fill: tokens.gray600,\n      verticalAlign: 'middle',\n      outline: 'none',\n    }),\n    dragIcon: css({\n      padding: tokens.spacingXs,\n      paddingRight: 0,\n      cursor: 'move',\n    }),\n    pill: getPillStyle(variant),\n  };\n}\n"],"names":["Pill","PillProps","React","CommonProps","PropsWithHTMLElement","ExpandProps","Tooltip","DragIcon","CloseIcon","Button","PillVariants","getPillStyles","PillInternalProps","label","onClose","onDrag","dragHandleComponent","ReactNode","variant","forwardRef","HTMLDivElement","props","ref","testId","className","otherProps","styles","textIsTruncated","setTextIsTruncated","useState","trackRefChange","useCallback","scrollWidth","offsetWidth","parentElement","pill","dragIcon","icon","closeButton","displayName","tokens","getCloseButtonStyle","borderLeft","gray400","borderTopLeftRadius","borderBottomLeftRadius","padding","spacingXs","minHeight","transition","transitionDurationShort","transitionEasingDefault","transitionDurationDefault","boxShadow","glowMuted","borderLeftColor","gray300","backgroundColor","getLabelStyle","color","gray700","lineHeight","lineHeightM","fontSize","fontSizeM","flexGrow","whiteSpace","textOverflow","overflow","getPillStyle","variantStyle","background","gray200","textDecoration","opacity","display","fontFamily","fontStackPrimary","alignItems","borderRadius","borderRadiusSmall","border","maxWidth","fill","gray600","verticalAlign","outline","paddingRight","cursor"],"version":3,"file":"module.js.map"}
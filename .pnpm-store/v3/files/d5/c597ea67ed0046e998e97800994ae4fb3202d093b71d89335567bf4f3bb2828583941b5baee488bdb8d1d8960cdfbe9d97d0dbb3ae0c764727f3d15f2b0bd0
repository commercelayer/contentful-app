{"mappings":"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","sources":["packages/components/badge/src/index.ts","packages/components/badge/src/Badge/Badge.tsx","packages/components/badge/src/Badge/Badge.styles.ts","packages/components/badge/src/EntityStatusBadge/EntityStatusBadge.tsx"],"sourcesContent":["export { Badge } from './Badge/Badge';\nexport type { BadgeProps } from './Badge/Badge';\nexport { EntityStatusBadge } from './EntityStatusBadge/EntityStatusBadge';\nexport type { EntityStatusBadgeProps } from './EntityStatusBadge/EntityStatusBadge';\nexport type { BadgeVariant } from './types';\n","import React from 'react';\nimport { cx } from 'emotion';\nimport { Box } from '@contentful/f36-core';\nimport type {\n  CommonProps,\n  PropsWithHTMLElement,\n  ExpandProps,\n} from '@contentful/f36-core';\n\nimport type { BadgeSize, BadgeVariant } from '../types';\nimport { getBadgeStyles } from './Badge.styles';\n\nexport interface BadgeInternalProps extends CommonProps {\n  /**\n   * Sets the size of the component\n   * @default default\n   */\n  size?: BadgeSize;\n  /**\n   * Determines the variation of the component\n   * @default primary\n   */\n  variant?: BadgeVariant;\n\n  children: React.ReactNode;\n}\n\nexport type BadgeProps = PropsWithHTMLElement<BadgeInternalProps, 'div'>;\n\nexport const Badge = React.forwardRef<HTMLDivElement, ExpandProps<BadgeProps>>(\n  (props, ref) => {\n    const {\n      children,\n      variant = 'primary',\n      size = 'default',\n      testId = 'cf-ui-badge',\n      className,\n      ...otherProps\n    } = props;\n\n    return (\n      <Box\n        as=\"div\"\n        testId={testId}\n        display=\"inline-block\"\n        className={cx(getBadgeStyles({ variant, size }), className)}\n        {...otherProps}\n        ref={ref}\n      >\n        {children}\n      </Box>\n    );\n  },\n);\n\nBadge.displayName = 'Badge';\n","import tokens from '@contentful/f36-tokens';\nimport { css } from 'emotion';\nimport type { BadgeVariant, BadgeSize } from '../types';\nimport type { CSSObject } from '@emotion/serialize';\n\nconst variantToStyles = ({ variant }: { variant: BadgeVariant }): CSSObject => {\n  switch (variant) {\n    case 'positive':\n      return {\n        color: tokens.green600,\n        backgroundColor: tokens.green200,\n      };\n    case 'primary':\n      return {\n        color: tokens.blue600,\n        backgroundColor: tokens.blue200,\n      };\n    case 'negative':\n      return {\n        color: tokens.red600,\n        backgroundColor: tokens.red200,\n      };\n    case 'warning':\n      return {\n        color: tokens.orange600,\n        backgroundColor: tokens.orange200,\n      };\n    case 'secondary':\n      return {\n        color: tokens.gray700,\n        backgroundColor: tokens.gray200,\n      };\n    case 'primary-filled':\n      return {\n        color: tokens.colorWhite,\n        backgroundColor: tokens.blue600,\n      };\n    case 'featured':\n      return {\n        color: tokens.purple600,\n        backgroundColor: tokens.purple200,\n      };\n    default:\n      return {};\n  }\n};\n\nconst sizeToStyles = ({ size }: { size: BadgeSize }): CSSObject => {\n  switch (size) {\n    case 'small':\n      return {\n        padding: `3px ${tokens.spacing2Xs}`,\n        fontSize: '0.625rem',\n        lineHeight: '0.625rem',\n        maxHeight: '16px',\n      };\n    default:\n      return {\n        padding: `0 ${tokens.spacingXs}`,\n        fontSize: `calc(1rem * (12 / ${tokens.fontBaseDefault}))`,\n        lineHeight: '20px',\n        maxHeight: '20px',\n      };\n  }\n};\n\nexport const getBadgeStyles = ({\n  variant,\n  size,\n}: {\n  variant: BadgeVariant;\n  size: BadgeSize;\n}) => {\n  return css({\n    fontFamily: tokens.fontStackPrimary,\n    fontWeight: tokens.fontWeightDemiBold,\n\n    textTransform: 'uppercase',\n    letterSpacing:\n      '0.06rem' /*move to tokens or update wide letter spacing token*/,\n    borderRadius: `${tokens.borderRadiusSmall}`,\n    whiteSpace: 'nowrap',\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    verticalAlign: 'middle',\n    ...variantToStyles({ variant }),\n    ...sizeToStyles({ size }),\n  });\n};\n","import React from 'react';\nimport type { EntityStatus, ExpandProps } from '@contentful/f36-core';\n\nimport { Badge } from '../Badge/Badge';\nimport type { BadgeProps } from '../Badge/Badge';\nimport type { BadgeVariant, BadgeSize } from '../types';\n\nconst statusMap: { [key in EntityStatus]: BadgeVariant } = {\n  published: 'positive',\n  draft: 'warning',\n  archived: 'negative',\n  changed: 'primary',\n  deleted: 'negative',\n  new: 'primary-filled',\n};\n\nexport interface EntityStatusBadgeProps\n  extends Omit<BadgeProps, 'variant' | 'children'> {\n  size?: BadgeSize;\n  entityStatus: EntityStatus;\n}\n\nfunction EntityStatusBadge(\n  props: EntityStatusBadgeProps,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const { entityStatus, ...otherProps } = props;\n  const variant = statusMap[entityStatus];\n  return (\n    <Badge {...otherProps} variant={variant} ref={ref}>\n      {entityStatus}\n    </Badge>\n  );\n}\n\nEntityStatusBadge.displayName = 'EntityStatusBadge';\n\nconst _EntityStatusBadge = React.forwardRef<\n  HTMLDivElement,\n  ExpandProps<EntityStatusBadgeProps>\n>(EntityStatusBadge);\nexport { _EntityStatusBadge as EntityStatusBadge };\n"],"names":["Badge","BadgeProps","EntityStatusBadge","EntityStatusBadgeProps","BadgeVariant","React","Box","CommonProps","PropsWithHTMLElement","ExpandProps","BadgeSize","getBadgeStyles","BadgeInternalProps","size","variant","children","ReactNode","forwardRef","HTMLDivElement","props","ref","testId","className","otherProps","displayName","tokens","CSSObject","variantToStyles","color","green600","backgroundColor","green200","blue600","blue200","red600","red200","orange600","orange200","gray700","gray200","colorWhite","purple600","purple200","sizeToStyles","padding","spacing2Xs","fontSize","lineHeight","maxHeight","spacingXs","fontBaseDefault","fontFamily","fontStackPrimary","fontWeight","fontWeightDemiBold","textTransform","letterSpacing","borderRadius","borderRadiusSmall","whiteSpace","overflow","textOverflow","verticalAlign","EntityStatus","statusMap","published","draft","archived","changed","deleted","new","Omit","entityStatus","Ref","_EntityStatusBadge"],"version":3,"file":"main.js.map"}
"use strict";Object.defineProperty(exports,"__esModule",{value:!0}),exports.normalize=exports.denormalize=void 0;const common_1=require("./common"),denormalize=e=>{let t;e.links&&delete e.links;const n=e.data,i=e.included;return Array.isArray(n)?t=n.map(o=>denormalizeResource(o,i)):t=denormalizeResource(n,i),t};exports.denormalize=denormalize;const findIncluded=(e,t=[])=>t.find(i=>e.id===i.id&&e.type===i.type)||e,denormalizeResource=(e,t)=>{const n=Object.assign({id:e.id,type:e.type},e.attributes);return e.relationships&&Object.keys(e.relationships).forEach(i=>{const o=e.relationships[i].data;o?Array.isArray(o)?n[i]=o.map(s=>denormalizeResource(findIncluded(s,t),t)):n[i]=denormalizeResource(findIncluded(o,t),t):o===null&&(n[i]=null)}),n},normalize=e=>{const t={},n={};for(const o in e){if(["type","id"].includes(o))continue;const s=e[o];s&&((0,common_1.isResourceId)(s)||Array.isArray(s)&&(0,common_1.isResourceId)(s[0]))?n[o]={data:s}:t[o]=s}const i={type:e.type,attributes:t,relationships:n};return(0,common_1.isResourceId)(e)&&(i.id=e.id),i};exports.normalize=normalize;
{"mappings":"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","sources":["packages/components/autocomplete/src/index.ts","packages/components/autocomplete/src/Autocomplete.tsx","packages/components/autocomplete/src/AutocompleteItems.tsx","packages/components/autocomplete/src/Autocomplete.styles.ts"],"sourcesContent":["export { Autocomplete } from './Autocomplete';\nexport type { AutocompleteProps } from './Autocomplete';\n","import React, { useCallback, useState } from 'react';\nimport { cx } from 'emotion';\nimport { useCombobox } from 'downshift';\n\nimport { mergeRefs } from '@contentful/f36-core';\nimport type { CommonProps, ExpandProps } from '@contentful/f36-core';\nimport { IconButton } from '@contentful/f36-button';\nimport { TextInput } from '@contentful/f36-forms';\nimport type { TextInputProps } from '@contentful/f36-forms';\nimport { CloseIcon, ChevronDownIcon } from '@contentful/f36-icons';\nimport { SkeletonContainer, SkeletonBodyText } from '@contentful/f36-skeleton';\nimport { Popover } from '@contentful/f36-popover';\nimport { Subheading, SectionHeading } from '@contentful/f36-typography';\n\nimport { AutocompleteItems } from './AutocompleteItems';\nimport { getAutocompleteStyles } from './Autocomplete.styles';\n\nexport interface GenericGroupType<ItemType> {\n  groupTitle: string;\n  options: ItemType[];\n}\n\n// eslint-disable-next-line @typescript-eslint/no-explicit-any\nexport interface AutocompleteProps<ItemType>\n  extends CommonProps,\n    Pick<\n      TextInputProps,\n      | 'isDisabled'\n      | 'isInvalid'\n      | 'isReadOnly'\n      | 'isRequired'\n      | 'id'\n      | 'defaultValue'\n    > {\n  /**\n   * It’s an array of data to be used as \"options\" by the autocomplete component.\n   * This can either be a plain list of items or a list of groups of items.\n   */\n  items: ItemType[] | GenericGroupType<ItemType>[];\n\n  /**\n   * Set a custom icon for the text input\n   */\n  icon?: React.ReactElement;\n\n  /**\n   * Tells if the item is a object with groups\n   */\n  isGrouped?: boolean;\n\n  /**\n   * Function called whenever the input value changes\n   */\n  onInputValueChange?: (value: string) => void;\n  /**\n   * This is the function that will be called when the user selects one of the \"options\" in the list.\n   * The component will pass the selected \"item\" as an argument to the function..\n   */\n  onSelectItem: (item: ItemType) => void;\n\n  /**\n   * Applying the selectedItem property turns autocomplete into a controlled component.\n   * Can be used to display e.g. previously selected element. If it is an object the itemToString function will apply to it.\n   */\n  selectedItem?: ItemType;\n\n  /**\n   * This is the function that will be called for each \"item\" passed in the `items` prop.\n   * It receives the \"item\" and \"inputValue\" as arguments and returns a ReactNode.\n   * The inputValue is passed in case you want to highlight the match on the render.\n   */\n  renderItem?: (item: ItemType, inputValue: string) => React.ReactNode;\n  /**\n   * When using objects as `items`, we recommend passing a function that tells Downshift how to extract a string\n   * from those objetcs to be used as inputValue\n   */\n  itemToString?: (item: ItemType) => string;\n  /**\n   * If this is set to `true` the text input will be cleared after an item is selected\n   * @default false\n   */\n  clearAfterSelect?: boolean;\n  /**\n   * If this is set to `false` the dropdown menu will stay open after selecting an item\n   * @default true\n   */\n  closeAfterSelect?: boolean;\n  /**\n   * This is the value will be passed to the `placeholder` prop of the input.\n   * @default \"Search\"\n   */\n  placeholder?: string;\n  /**\n   * A message that will be shown when it is not possible to find any option that matches the input value\n   * @default \"No matches\"\n   */\n  noMatchesMessage?: string;\n  /**\n   * Use this prop to get a ref to the input element of the component\n   */\n  inputRef?: React.Ref<HTMLInputElement>;\n  /**\n   * Use this prop to get a ref to the toggle button of the component\n   */\n  toggleRef?: React.Ref<HTMLButtonElement>;\n  /**\n   * Use this prop to get a ref to the list of items of the component\n   */\n  listRef?: React.Ref<HTMLUListElement>;\n  /**\n   * It sets the width of the list\n   * @default \"auto\"\n   */\n  listWidth?: 'auto' | 'full';\n  /**\n   * It sets the max-height, in pixels, of the list\n   * The default value is the height of 5 single line items\n   * @default 180\n   */\n  listMaxHeight?: number;\n  /**\n   * Sets the list to show its loading state\n   * @default false\n   */\n  isLoading?: boolean;\n  /**\n   * Boolean to control whether or not to render the suggestions box in a React Portal.\n   * Rendering content inside a Portal allows the suggestions box to escape the bounds\n   * of its parent while still being positioned correctly.\n   * Defaults to `false`\n   */\n  usePortal?: boolean;\n}\n\nfunction _Autocomplete<ItemType>(\n  props: AutocompleteProps<ItemType>,\n  ref: React.Ref<HTMLDivElement>,\n) {\n  const {\n    id,\n    className,\n    clearAfterSelect = false,\n    closeAfterSelect = true,\n    defaultValue = '',\n    selectedItem,\n    items,\n    onInputValueChange,\n    onSelectItem,\n    renderItem,\n    icon = <ChevronDownIcon variant=\"muted\" />,\n    itemToString = (item: ItemType) => (item as unknown) as string,\n    isInvalid,\n    isDisabled,\n    isRequired,\n    isReadOnly,\n    noMatchesMessage = 'No matches found',\n    placeholder = 'Search',\n    inputRef,\n    toggleRef,\n    listRef,\n    listWidth = 'auto',\n    listMaxHeight = 180,\n    isGrouped = false,\n    isLoading = false,\n    usePortal = false,\n    testId = 'cf-autocomplete',\n  } = props;\n\n  type GroupType = GenericGroupType<ItemType>;\n\n  const styles = getAutocompleteStyles(listMaxHeight);\n\n  const [inputValue, setInputValue] = useState(defaultValue);\n\n  const handleInputValueChange = useCallback(\n    (value: string) => {\n      setInputValue(value);\n\n      onInputValueChange?.(value);\n    },\n    [onInputValueChange],\n  );\n\n  // Handle manually to avoid a jumping cursor, see https://github.com/downshift-js/downshift/issues/1108#issuecomment-842407759\n  const handleNativeChangeEvent = useCallback(\n    (event: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {\n      const value = event.target.value;\n      handleInputValueChange(value);\n    },\n    [handleInputValueChange],\n  );\n\n  const flattenItems = isUsingGroups(isGrouped, items)\n    ? items.reduce(\n        (acc: ItemType[], group: GroupType) => [...acc, ...group.options],\n        [],\n      )\n    : items;\n\n  const isShowingNoMatches = isUsingGroups(isGrouped, items)\n    ? items.every((group: GroupType) => group.options.length === 0)\n    : items.length === 0;\n\n  const {\n    getComboboxProps,\n    getInputProps,\n    getItemProps,\n    getMenuProps,\n    getToggleButtonProps,\n    highlightedIndex,\n    isOpen,\n    toggleMenu,\n  } = useCombobox({\n    items: flattenItems,\n    selectedItem,\n    inputValue,\n    itemToString,\n    onInputValueChange: ({ type, inputValue }) => {\n      if (type !== '__input_change__') {\n        handleInputValueChange(inputValue);\n      }\n    },\n    onStateChange: ({ type, selectedItem }) => {\n      switch (type) {\n        case useCombobox.stateChangeTypes.InputKeyDownEnter:\n        case useCombobox.stateChangeTypes.ItemClick:\n          if (selectedItem) {\n            onSelectItem(selectedItem);\n          }\n          if (clearAfterSelect) {\n            handleInputValueChange('');\n          }\n          if (!closeAfterSelect) {\n            toggleMenu();\n          }\n          break;\n        default:\n          break;\n      }\n    },\n  });\n\n  const {\n    'aria-labelledby': _labelledby,\n    id: _inputId,\n    ...inputProps\n  } = getInputProps();\n  const comboboxProps = getComboboxProps();\n  const toggleProps = getToggleButtonProps();\n  const menuProps = getMenuProps();\n  let elementStartIndex = 0;\n\n  return (\n    <div\n      data-test-id={testId}\n      className={cx(styles.autocomplete, className)}\n      ref={ref}\n    >\n      <Popover\n        usePortal={usePortal}\n        isOpen={isOpen}\n        isFullWidth={listWidth === 'full'}\n        renderOnlyWhenOpen={false}\n        // This is necessary, otherwise the focus will change from the input to the Popover\n        // and the user won't be able to type in the input\n        // eslint-disable-next-line jsx-a11y/no-autofocus\n        autoFocus={false}\n        id={menuProps.id}\n      >\n        <Popover.Trigger>\n          <div {...comboboxProps} className={styles.combobox}>\n            <TextInput\n              className={styles.inputField}\n              {...inputProps}\n              onFocus={() => {\n                if (!isOpen) {\n                  toggleMenu();\n                }\n              }}\n              id={id}\n              isInvalid={isInvalid}\n              isDisabled={isDisabled}\n              isRequired={isRequired}\n              isReadOnly={isReadOnly}\n              ref={mergeRefs(inputProps.ref, inputRef)}\n              testId=\"cf-autocomplete-input\"\n              placeholder={placeholder}\n              onChange={(event) => {\n                inputProps.onChange(event);\n                handleNativeChangeEvent(event);\n              }}\n            />\n            <IconButton\n              {...toggleProps}\n              ref={mergeRefs(toggleProps.ref, toggleRef)}\n              aria-label={inputValue ? 'Clear' : 'Show list'}\n              className={styles.toggleButton}\n              variant=\"transparent\"\n              icon={inputValue ? <CloseIcon variant=\"muted\" /> : icon}\n              onClick={() => {\n                if (inputValue) {\n                  handleInputValueChange('');\n                } else {\n                  toggleMenu();\n                }\n              }}\n              isDisabled={isDisabled}\n              size=\"small\"\n            />\n          </div>\n        </Popover.Trigger>\n\n        <Popover.Content\n          {...menuProps}\n          ref={mergeRefs(menuProps.ref, listRef)}\n          className={styles.content}\n          testId=\"cf-autocomplete-container\"\n        >\n          {isLoading &&\n            [...Array(3)].map((_, index) => (\n              <div key={index} className={cx(styles.item, styles.disabled)}>\n                <ListItemLoadingState />\n              </div>\n            ))}\n\n          {!isLoading && isShowingNoMatches && (\n            <div className={styles.item}>\n              <Subheading className={styles.noMatchesTitle}>\n                {noMatchesMessage}\n              </Subheading>\n            </div>\n          )}\n\n          {!isLoading &&\n            isUsingGroups(isGrouped, items) &&\n            items.map((group: GroupType, index: number) => {\n              if (group.options.length < 1) {\n                return;\n              }\n              const render = (\n                <div key={index}>\n                  <SectionHeading\n                    key={index}\n                    data-test-id=\"cf-autocomplete-grouptitle\"\n                    marginBottom=\"none\"\n                    className={styles.groupTitle}\n                  >\n                    {group.groupTitle}\n                  </SectionHeading>\n                  <AutocompleteItems<ItemType>\n                    items={group.options}\n                    highlightedIndex={highlightedIndex}\n                    getItemProps={getItemProps}\n                    renderItem={renderItem}\n                    inputValue={inputValue}\n                    elementStartIndex={elementStartIndex}\n                  />\n                </div>\n              );\n              elementStartIndex += group.options.length;\n              return render;\n            })}\n\n          {!isLoading &&\n            !isUsingGroups(isGrouped, items) &&\n            items.length > 0 && (\n              <AutocompleteItems<ItemType>\n                items={items}\n                elementStartIndex={elementStartIndex}\n                highlightedIndex={highlightedIndex}\n                getItemProps={getItemProps}\n                renderItem={renderItem}\n                inputValue={inputValue}\n              />\n            )}\n        </Popover.Content>\n      </Popover>\n    </div>\n  );\n}\n\nconst ListItemLoadingState = () => {\n  return (\n    <SkeletonContainer svgHeight={16}>\n      <SkeletonBodyText numberOfLines={1} />\n    </SkeletonContainer>\n  );\n};\n\n// This is required to infer correct typings when differentiating groups and items\nfunction isUsingGroups<ItemType>(\n  isGrouped: boolean,\n  items: ItemType[] | GenericGroupType<ItemType>[],\n): items is GenericGroupType<ItemType>[] {\n  return isGrouped;\n}\n\n/**\n * The Autocomplete is a component that will show a `TextInput` where a user can type any word which will be used\n * to filter a list of items. That list of filtered items will be shown to the user as possible options for the input.\n * Once one of the options is selected, that option becomes the value of the `TextInput`.\n */\nexport const Autocomplete = React.forwardRef(_Autocomplete) as <T>(\n  props: ExpandProps<AutocompleteProps<T>> & {\n    ref?: React.Ref<HTMLDivElement>;\n  },\n) => ReturnType<typeof _Autocomplete>;\n","import React, { HTMLAttributes } from 'react';\nimport { cx } from 'emotion';\n\nimport { getStringMatch } from '@contentful/f36-utils';\nimport { Text } from '@contentful/f36-typography';\nimport { getAutocompleteStyles } from './Autocomplete.styles';\nimport type { UseComboboxGetItemPropsOptions } from 'downshift';\n\ninterface AutocompleteItemsProps<ItemType> {\n  items: ItemType[];\n  elementStartIndex: number;\n  highlightedIndex: number;\n  getItemProps: (\n    options: UseComboboxGetItemPropsOptions<ItemType>,\n  ) => HTMLAttributes<HTMLLIElement>;\n  renderItem: (item: ItemType, inputValue: string) => React.ReactNode;\n  inputValue: string;\n  listMaxHeight?: number;\n}\n\nexport const AutocompleteItems = <ItemType,>(\n  props: AutocompleteItemsProps<ItemType>,\n) => {\n  const {\n    items,\n    elementStartIndex,\n    highlightedIndex,\n    getItemProps,\n    renderItem,\n    inputValue,\n    listMaxHeight = 180,\n  } = props;\n\n  const styles = getAutocompleteStyles(listMaxHeight);\n\n  return (\n    <ul className={styles.list} data-test-id=\"cf-autocomplete-list\">\n      {items.map((item: ItemType, index: number) => {\n        const itemIndex = elementStartIndex + index;\n        const itemProps = getItemProps({ item, index: itemIndex });\n        return (\n          <Text\n            {...itemProps}\n            as=\"li\"\n            key={itemIndex}\n            className={cx([\n              styles.item,\n              highlightedIndex === itemIndex && styles.highlighted,\n            ])}\n            data-test-id={`cf-autocomplete-list-item-${itemIndex}`}\n          >\n            {renderItem ? (\n              renderItem(item, inputValue)\n            ) : typeof item === 'string' ? (\n              <HighlightedItem item={item} inputValue={inputValue} />\n            ) : (\n              item\n            )}\n          </Text>\n        );\n      })}\n    </ul>\n  );\n};\n\nAutocompleteItems.displayName = 'AutocompleteItems';\n\nfunction HighlightedItem({\n  item,\n  inputValue,\n}: {\n  item: string;\n  inputValue: string;\n}) {\n  const { before, match, after } = getStringMatch(item, inputValue);\n\n  return (\n    <>\n      {before}\n      <b>{match}</b>\n      {after}\n    </>\n  );\n}\n\nHighlightedItem.displayName = 'HighlightedItem';\n","import { css } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getAutocompleteStyles = (listMaxHeight: number) => ({\n  autocomplete: css({\n    position: 'relative',\n    width: '100%',\n  }),\n  combobox: css({\n    position: 'relative',\n  }),\n  inputField: css({\n    paddingRight: tokens.spacingXl,\n    textOverflow: 'ellipsis',\n    whiteSpace: 'nowrap',\n  }),\n  toggleButton: css({\n    position: 'absolute',\n    top: '1px',\n    right: '1px',\n    zIndex: 1,\n    padding: tokens.spacing2Xs,\n    height: '38px',\n  }),\n  content: css({\n    overflow: 'auto',\n    maxHeight: `${listMaxHeight}px`,\n  }),\n  list: css({\n    listStyle: 'none',\n    padding: `${tokens.spacingXs} 0`,\n    margin: 0,\n  }),\n  groupTitle: css({\n    padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    lineHeight: tokens.lineHeightM,\n  }),\n  noMatchesTitle: css({\n    color: tokens.gray500,\n    margin: `${tokens.spacingM} 0 ${tokens.spacingM} 0`,\n  }),\n  item: css({\n    display: 'block',\n    padding: `${tokens.spacingXs} ${tokens.spacingM}`,\n    wordBreak: 'break-word',\n    whiteSpace: 'break-spaces',\n    cursor: 'pointer',\n    hyphens: 'auto',\n\n    '&:focus, &:hover': {\n      backgroundColor: tokens.gray100,\n    },\n    '&:active': {\n      backgroundColor: tokens.gray200,\n    },\n  }),\n  disabled: css({\n    opacity: 0.5,\n    pointerEvents: 'none',\n  }),\n  highlighted: css({\n    backgroundColor: tokens.gray100,\n  }),\n});\n"],"names":["Autocomplete","AutocompleteProps","React","useCallback","useState","useCombobox","mergeRefs","CommonProps","ExpandProps","IconButton","TextInput","TextInputProps","CloseIcon","ChevronDownIcon","SkeletonContainer","SkeletonBodyText","Popover","Subheading","SectionHeading","AutocompleteItems","getAutocompleteStyles","GenericGroupType","groupTitle","options","ItemType","Pick","items","icon","ReactElement","isGrouped","onInputValueChange","value","onSelectItem","item","selectedItem","renderItem","inputValue","ReactNode","itemToString","clearAfterSelect","closeAfterSelect","placeholder","noMatchesMessage","inputRef","Ref","HTMLInputElement","toggleRef","HTMLButtonElement","listRef","HTMLUListElement","listWidth","listMaxHeight","isLoading","usePortal","_Autocomplete","props","ref","HTMLDivElement","id","className","defaultValue","isInvalid","isDisabled","isRequired","isReadOnly","testId","GroupType","styles","setInputValue","handleInputValueChange","handleNativeChangeEvent","event","ChangeEvent","HTMLTextAreaElement","target","flattenItems","isUsingGroups","reduce","acc","group","isShowingNoMatches","every","length","getComboboxProps","getInputProps","getItemProps","getMenuProps","getToggleButtonProps","highlightedIndex","isOpen","toggleMenu","type","onStateChange","stateChangeTypes","InputKeyDownEnter","ItemClick","_labelledby","_inputId","inputProps","comboboxProps","toggleProps","menuProps","elementStartIndex","autocomplete","combobox","inputField","onChange","toggleButton","content","Array","map","_","index","disabled","noMatchesTitle","render","ListItemLoadingState","forwardRef","T","ReturnType","HTMLAttributes","getStringMatch","Text","UseComboboxGetItemPropsOptions","AutocompleteItemsProps","HTMLLIElement","list","itemIndex","itemProps","highlighted","displayName","HighlightedItem","before","match","after","tokens","paddingRight","spacingXl","textOverflow","whiteSpace","position","top","right","zIndex","padding","spacing2Xs","height","overflow","maxHeight","listStyle","spacingXs","margin","spacingM","lineHeight","lineHeightM","color","gray500","display","wordBreak","cursor","hyphens","backgroundColor","gray100","gray200"],"version":3,"file":"main.js.map"}
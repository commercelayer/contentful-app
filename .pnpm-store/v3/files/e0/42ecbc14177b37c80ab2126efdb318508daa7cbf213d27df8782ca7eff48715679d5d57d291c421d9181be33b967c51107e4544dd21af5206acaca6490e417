{"mappings":"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","sources":["packages/components/collapse/src/index.ts","packages/components/collapse/src/Collapse.tsx","packages/components/collapse/src/Collapse.styles.ts"],"sourcesContent":["export type { CollapseProps } from './Collapse';\nexport { Collapse } from './Collapse';\n","import React, { useLayoutEffect, useRef } from 'react';\nimport type { CommonProps, PropsWithHTMLElement } from '@contentful/f36-core';\nimport { Box } from '@contentful/f36-core';\nimport { getCollapseStyles } from './Collapse.styles';\n\ninterface CollapseInternalProps extends CommonProps {\n  /**\n   * Child nodes to be rendered in the component\n   */\n  children?: React.ReactNode;\n  /**\n   * A boolean that tells if the accordion should be expanded or collapsed\n   */\n  isExpanded: boolean;\n  /**\n   * string for additional classNames\n   */\n  className?: string;\n}\n\nexport type CollapseProps = PropsWithHTMLElement<CollapseInternalProps, 'div'>;\n\nexport const Collapse = ({\n  children,\n  className,\n  isExpanded = false,\n  testId = 'cf-collapse',\n  ...otherProps\n}: CollapseProps) => {\n  const panelEl = useRef<HTMLDivElement>(null);\n  const styles = getCollapseStyles({ className });\n\n  const getPanelContentHeight = () => {\n    const { current } = panelEl;\n\n    if (!current) {\n      // to keep the function return type as string only and\n      // not overcomplicate things with non-nullable checks\n      return '0px';\n    }\n\n    return `${current.scrollHeight}px`;\n  };\n\n  useLayoutEffect(() => {\n    const { current } = panelEl;\n\n    const handleTransitionEnd = () => {\n      if (current) {\n        if (isExpanded) {\n          current.style.setProperty('height', 'auto');\n        } else {\n          current.style.removeProperty('pointer-events');\n          current.style.setProperty('display', 'none');\n        }\n      }\n    };\n\n    if (current) {\n      current.addEventListener('transitionend', handleTransitionEnd);\n      requestAnimationFrame(function () {\n        if (!isExpanded) {\n          // Don't allow interaction while collapsing\n          current.style.setProperty('pointer-events', 'none');\n        } else {\n          // Overwrite none display to see expanding transition\n          current.style.setProperty('display', 'block');\n          current.style.removeProperty('pointer-events');\n        }\n        // Calculate panel height after removing none display\n        const fromHeight = isExpanded ? '0px' : getPanelContentHeight();\n        const toHeight = isExpanded ? getPanelContentHeight() : '0px';\n        current.style.setProperty('height', fromHeight);\n\n        requestAnimationFrame(function () {\n          current.style.setProperty('height', toHeight);\n        });\n      });\n    }\n\n    return () => {\n      if (current) {\n        current.removeEventListener('transitionend', handleTransitionEnd);\n      }\n    };\n  }, [isExpanded]);\n\n  return (\n    <Box\n      {...otherProps}\n      testId={testId}\n      role=\"region\"\n      aria-hidden={!isExpanded}\n      className={styles.collapseWrapper}\n      ref={panelEl}\n    >\n      {children}\n    </Box>\n  );\n};\n","import { css, cx } from 'emotion';\nimport tokens from '@contentful/f36-tokens';\n\nexport const getCollapseStyles = ({ className }: { className?: string }) => {\n  return {\n    collapseWrapper: cx(\n      css({\n        boxSizing: 'border-box',\n        overflow: 'hidden',\n        height: 0,\n        display: 'none',\n        transition: `height ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}, padding ${tokens.transitionDurationDefault} ${tokens.transitionEasingDefault}`,\n      }),\n      className,\n    ),\n  };\n};\n"],"names":["CollapseProps","Collapse","React","useLayoutEffect","useRef","CommonProps","PropsWithHTMLElement","Box","getCollapseStyles","CollapseInternalProps","children","ReactNode","isExpanded","className","testId","otherProps","panelEl","HTMLDivElement","styles","getPanelContentHeight","current","scrollHeight","handleTransitionEnd","style","setProperty","removeProperty","addEventListener","requestAnimationFrame","fromHeight","toHeight","removeEventListener","collapseWrapper","tokens","boxSizing","overflow","height","display","transition","transitionDurationDefault","transitionEasingDefault"],"version":3,"file":"main.js.map"}
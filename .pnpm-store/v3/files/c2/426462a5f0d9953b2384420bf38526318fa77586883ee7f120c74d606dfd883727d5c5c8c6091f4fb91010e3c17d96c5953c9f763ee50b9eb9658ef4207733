import { TextLinkProps } from "@contentful/f36-text-link";
import React, { Component } from "react";
import { CommonProps } from "@contentful/f36-core";
interface NotificationCta {
    label: string;
    textLinkProps: Partial<TextLinkProps>;
}
export type NotificationVariant = 'positive' | 'negative' | 'warning' | 'primary';
export interface NotificationItemProps extends CommonProps {
    /**
     * Defines the styling of notification
     * @default positive
     */
    variant?: NotificationVariant;
    /**
     * Defines if the close button should be rendered
     * @default true
     */
    withCloseButton?: boolean;
    /**
     * Function that will be triggered when close button is clicked
     */
    onClose?: Function;
    /**
     * Title of the notification
     */
    title?: string;
    /**
     * Content of the notificaiton
     */
    children: React.ReactNode;
    /**
     * Label and text-link props of the CTA
     */
    cta?: Partial<NotificationCta>;
}
export const NotificationItem: React.ForwardRefExoticComponent<NotificationItemProps & React.RefAttributes<unknown>>;
export interface NotificationItemContainerProps extends NotificationItemProps {
    duration?: number;
    isShown?: boolean;
}
interface NotificationItemContainerState {
    isShown: boolean;
}
export class NotificationItemContainer extends Component<NotificationItemContainerProps, NotificationItemContainerState> {
    static defaultProps: Partial<NotificationItemContainerProps>;
    displayName: 'NotificationItemContainer';
    timer: number | null;
    state: {
        isShown: boolean;
    };
    componentDidMount(): void;
    componentDidUpdate(prevProps: NotificationItemContainerProps): void;
    componentWillUnmount(): void;
    startTimer: () => void;
    stopTimer: () => void;
    handleClose: () => void;
    handleMouseEnter: () => void;
    handleMouseLeave: () => void;
    render(): JSX.Element;
}
type Placement = 'top' | 'bottom';
export interface NotificationProps {
    id: string | number;
    text: string;
    onClose: Function;
    duration?: number;
    withClose: boolean;
    isShown: boolean;
    variant: NotificationVariant;
    title?: string;
    cta?: Partial<NotificationCta>;
}
type ShowAction<T> = (text: string, setting?: {
    variant: NotificationVariant;
    id?: string;
    duration?: number;
    withClose?: boolean;
    title?: string;
    cta?: Partial<NotificationCta>;
}) => T;
type CloseAction<T> = (id: string | number) => T;
type CloseAllAction<T> = () => T;
type SetDurationAction<T> = (duration: number) => T;
type SetPlacementAction<T> = (placement: Placement, params?: {
    offset: number;
}) => T;
export interface NotificationsManagerProps {
    register: (name: string, callback: Function) => void;
}
export const NotificationsManager: {
    ({ register, }: NotificationsManagerProps): React.ReactElement;
    displayName: string;
};
export interface NotificationsAPI {
    success: ShowAction<Notification>;
    error: ShowAction<Notification>;
    show: ShowAction<Notification>;
    close: CloseAction<void>;
    closeAll: CloseAllAction<void>;
    setPlacement: SetPlacementAction<void>;
    setDuration: SetDurationAction<void>;
}
type ExternalShowAction<T> = (text: string, settings?: {
    duration?: number;
    withClose?: boolean;
    id?: string;
    title?: string;
    cta?: Partial<NotificationCta>;
}) => T;
export const Notification: {
    success: ExternalShowAction<Promise<NotificationProps>>;
    error: ExternalShowAction<Promise<NotificationProps>>;
    warning: ExternalShowAction<Promise<NotificationProps>>;
    info: ExternalShowAction<Promise<NotificationProps>>;
    close: CloseAction<Promise<void>>;
    closeAll: CloseAllAction<Promise<void>>;
    setPlacement: SetPlacementAction<Promise<void>>;
    setDuration: SetDurationAction<Promise<void>>;
};

//# sourceMappingURL=types.d.ts.map
